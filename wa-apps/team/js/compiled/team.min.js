/*!
 * jquery-timepicker v1.11.5 - A jQuery timepicker plugin inspired by Google Calendar. It supports both mouse and keyboard navigation.
 * Copyright (c) 2016 Jon Thornton - http://jonthornton.github.com/jquery-timepicker/
 * License: MIT
 */

!function(a){"object"==typeof exports&&exports&&"object"==typeof module&&module&&module.exports===exports?a(require("jquery")):"function"==typeof define&&define.amd?define(["jquery"],a):a(jQuery)}(function(a){function b(a){var b=a[0];return b.offsetWidth>0&&b.offsetHeight>0}function c(b){if(b.minTime&&(b.minTime=t(b.minTime)),b.maxTime&&(b.maxTime=t(b.maxTime)),b.durationTime&&"function"!=typeof b.durationTime&&(b.durationTime=t(b.durationTime)),"now"==b.scrollDefault)b.scrollDefault=function(){return b.roundingFunction(t(new Date),b)};else if(b.scrollDefault&&"function"!=typeof b.scrollDefault){var c=b.scrollDefault;b.scrollDefault=function(){return b.roundingFunction(t(c),b)}}else b.minTime&&(b.scrollDefault=function(){return b.roundingFunction(b.minTime,b)});if("string"===a.type(b.timeFormat)&&b.timeFormat.match(/[gh]/)&&(b._twelveHourTime=!0),b.showOnFocus===!1&&-1!=b.showOn.indexOf("focus")&&b.showOn.splice(b.showOn.indexOf("focus"),1),b.disableTimeRanges.length>0){for(var d in b.disableTimeRanges)b.disableTimeRanges[d]=[t(b.disableTimeRanges[d][0]),t(b.disableTimeRanges[d][1])];b.disableTimeRanges=b.disableTimeRanges.sort(function(a,b){return a[0]-b[0]});for(var d=b.disableTimeRanges.length-1;d>0;d--)b.disableTimeRanges[d][0]<=b.disableTimeRanges[d-1][1]&&(b.disableTimeRanges[d-1]=[Math.min(b.disableTimeRanges[d][0],b.disableTimeRanges[d-1][0]),Math.max(b.disableTimeRanges[d][1],b.disableTimeRanges[d-1][1])],b.disableTimeRanges.splice(d,1))}return b}function d(b){var c=b.data("timepicker-settings"),d=b.data("timepicker-list");if(d&&d.length&&(d.remove(),b.data("timepicker-list",!1)),c.useSelect){d=a("<select />",{"class":"ui-timepicker-select"});var g=d}else{d=a("<ul />",{"class":"ui-timepicker-list"});var g=a("<div />",{"class":"ui-timepicker-wrapper",tabindex:-1});g.css({display:"none",position:"absolute"}).append(d)}if(c.noneOption)if(c.noneOption===!0&&(c.noneOption=c.useSelect?"Time...":"None"),a.isArray(c.noneOption)){for(var i in c.noneOption)if(parseInt(i,10)==i){var k=e(c.noneOption[i],c.useSelect);d.append(k)}}else{var k=e(c.noneOption,c.useSelect);d.append(k)}if(c.className&&g.addClass(c.className),(null!==c.minTime||null!==c.durationTime)&&c.showDuration){"function"==typeof c.step?"function":c.step;g.addClass("ui-timepicker-with-duration"),g.addClass("ui-timepicker-step-"+c.step)}var l=c.minTime;"function"==typeof c.durationTime?l=t(c.durationTime()):null!==c.durationTime&&(l=c.durationTime);var n=null!==c.minTime?c.minTime:0,o=null!==c.maxTime?c.maxTime:n+u-1;n>o&&(o+=u),o===u-1&&"string"===a.type(c.timeFormat)&&c.show2400&&(o=u);var p=c.disableTimeRanges,v=0,x=p.length,y=c.step;"function"!=typeof y&&(y=function(){return c.step});for(var i=n,z=0;o>=i;z++,i+=60*y(z)){var A=i,B=s(A,c);if(c.useSelect){var C=a("<option />",{value:B});C.text(B)}else{var C=a("<li />");C.addClass(43200>A%86400?"ui-timepicker-am":"ui-timepicker-pm"),C.data("time",86400>=A?A:A%86400),C.text(B)}if((null!==c.minTime||null!==c.durationTime)&&c.showDuration){var D=r(i-l,c.step);if(c.useSelect)C.text(C.text()+" ("+D+")");else{var E=a("<span />",{"class":"ui-timepicker-duration"});E.text(" ("+D+")"),C.append(E)}}x>v&&(A>=p[v][1]&&(v+=1),p[v]&&A>=p[v][0]&&A<p[v][1]&&(c.useSelect?C.prop("disabled",!0):C.addClass("ui-timepicker-disabled"))),d.append(C)}if(g.data("timepicker-input",b),b.data("timepicker-list",g),c.useSelect)b.val()&&d.val(f(t(b.val()),c)),d.on("focus",function(){a(this).data("timepicker-input").trigger("showTimepicker")}),d.on("blur",function(){a(this).data("timepicker-input").trigger("hideTimepicker")}),d.on("change",function(){m(b,a(this).val(),"select")}),m(b,d.val(),"initial"),b.hide().after(d);else{var F=c.appendTo;"string"==typeof F?F=a(F):"function"==typeof F&&(F=F(b)),F.append(g),j(b,d),d.on("mousedown click","li",function(c){b.off("focus.timepicker"),b.on("focus.timepicker-ie-hack",function(){b.off("focus.timepicker-ie-hack"),b.on("focus.timepicker",w.show)}),h(b)||b[0].focus(),d.find("li").removeClass("ui-timepicker-selected"),a(this).addClass("ui-timepicker-selected"),q(b)&&(b.trigger("hideTimepicker"),d.on("mouseup.timepicker click.timepicker","li",function(a){d.off("mouseup.timepicker click.timepicker"),g.hide()}))})}}function e(b,c){var d,e,f;return"object"==typeof b?(d=b.label,e=b.className,f=b.value):"string"==typeof b?d=b:a.error("Invalid noneOption value"),c?a("<option />",{value:f,"class":e,text:d}):a("<li />",{"class":e,text:d}).data("time",String(f))}function f(a,b){return a=b.roundingFunction(a,b),null!==a?s(a,b):void 0}function g(b){if(b.target!=window){var c=a(b.target);c.closest(".ui-timepicker-input").length||c.closest(".ui-timepicker-wrapper").length||(w.hide(),a(document).unbind(".ui-timepicker"),a(window).unbind(".ui-timepicker"))}}function h(a){var b=a.data("timepicker-settings");return(window.navigator.msMaxTouchPoints||"ontouchstart"in document)&&b.disableTouchKeyboard}function i(b,c,d){if(!d&&0!==d)return!1;var e=b.data("timepicker-settings"),f=!1,d=e.roundingFunction(d,e);return c.find("li").each(function(b,c){var e=a(c);if("number"==typeof e.data("time"))return e.data("time")==d?(f=e,!1):void 0}),f}function j(a,b){b.find("li").removeClass("ui-timepicker-selected");var c=t(l(a),a.data("timepicker-settings"));if(null!==c){var d=i(a,b,c);if(d){var e=d.offset().top-b.offset().top;(e+d.outerHeight()>b.outerHeight()||0>e)&&b.scrollTop(b.scrollTop()+d.position().top-d.outerHeight()),d.addClass("ui-timepicker-selected")}}}function k(b,c){if(""!==this.value&&"timepicker"!=c){var d=a(this);if(!d.is(":focus")||b&&"change"==b.type){var e=d.data("timepicker-settings"),f=t(this.value,e);if(null===f)return void d.trigger("timeFormatError");var g=!1;if(null!==e.minTime&&null!==e.maxTime&&(f<e.minTime||f>e.maxTime)&&(g=!0),a.each(e.disableTimeRanges,function(){return f>=this[0]&&f<this[1]?(g=!0,!1):void 0}),e.forceRoundTime){var h=e.roundingFunction(f,e);h!=f&&(f=h,c=null)}var i=s(f,e);g?m(d,i,"error")&&d.trigger("timeRangeError"):m(d,i,c)}}}function l(a){return a.is("input")?a.val():a.data("ui-timepicker-value")}function m(a,b,c){if(a.is("input")){a.val(b);var d=a.data("timepicker-settings");d.useSelect&&"select"!=c&&"initial"!=c&&a.data("timepicker-list").val(f(t(b),d))}return a.data("ui-timepicker-value")!=b?(a.data("ui-timepicker-value",b),"select"==c?a.trigger("selectTime").trigger("changeTime").trigger("change","timepicker"):-1==["error","initial"].indexOf(c)&&a.trigger("changeTime"),!0):(a.trigger("selectTime"),!1)}function n(a){switch(a.keyCode){case 13:case 9:return;default:a.preventDefault()}}function o(c){var d=a(this),e=d.data("timepicker-list");if(!e||!b(e)){if(40!=c.keyCode)return!0;w.show.call(d.get(0)),e=d.data("timepicker-list"),h(d)||d.focus()}switch(c.keyCode){case 13:return q(d)&&(k.call(d.get(0),{type:"change"}),w.hide.apply(this)),c.preventDefault(),!1;case 38:var f=e.find(".ui-timepicker-selected");return f.length?f.is(":first-child")||(f.removeClass("ui-timepicker-selected"),f.prev().addClass("ui-timepicker-selected"),f.prev().position().top<f.outerHeight()&&e.scrollTop(e.scrollTop()-f.outerHeight())):(e.find("li").each(function(b,c){return a(c).position().top>0?(f=a(c),!1):void 0}),f.addClass("ui-timepicker-selected")),!1;case 40:return f=e.find(".ui-timepicker-selected"),0===f.length?(e.find("li").each(function(b,c){return a(c).position().top>0?(f=a(c),!1):void 0}),f.addClass("ui-timepicker-selected")):f.is(":last-child")||(f.removeClass("ui-timepicker-selected"),f.next().addClass("ui-timepicker-selected"),f.next().position().top+2*f.outerHeight()>e.outerHeight()&&e.scrollTop(e.scrollTop()+f.outerHeight())),!1;case 27:e.find("li").removeClass("ui-timepicker-selected"),w.hide();break;case 9:w.hide();break;default:return!0}}function p(c){var d=a(this),e=d.data("timepicker-list"),f=d.data("timepicker-settings");if(!e||!b(e)||f.disableTextInput)return!0;switch(c.keyCode){case 96:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 77:case 80:case 186:case 8:case 46:f.typeaheadHighlight?j(d,e):e.hide()}}function q(a){var b=a.data("timepicker-settings"),c=a.data("timepicker-list"),d=null,e=c.find(".ui-timepicker-selected");return e.hasClass("ui-timepicker-disabled")?!1:(e.length&&(d=e.data("time")),null!==d&&("string"!=typeof d&&(d=s(d,b)),m(a,d,"select")),!0)}function r(a,b){a=Math.abs(a);var c,d,e=Math.round(a/60),f=[];return 60>e?f=[e,v.mins]:(c=Math.floor(e/60),d=e%60,30==b&&30==d&&(c+=v.decimal+5),f.push(c),f.push(1==c?v.hr:v.hrs),30!=b&&d&&(f.push(d),f.push(v.mins))),f.join(" ")}function s(b,c){if("number"!=typeof b)return null;var d=parseInt(b%60),e=parseInt(b/60%60),f=parseInt(b/3600%24),g=new Date(1970,0,2,f,e,d,0);if(isNaN(g.getTime()))return null;if("function"===a.type(c.timeFormat))return c.timeFormat(g);for(var h,i,j="",k=0;k<c.timeFormat.length;k++)switch(i=c.timeFormat.charAt(k)){case"a":j+=g.getHours()>11?v.pm:v.am;break;case"A":j+=g.getHours()>11?v.PM:v.AM;break;case"g":h=g.getHours()%12,j+=0===h?"12":h;break;case"G":h=g.getHours(),b===u&&(h=c.show2400?24:0),j+=h;break;case"h":h=g.getHours()%12,0!==h&&10>h&&(h="0"+h),j+=0===h?"12":h;break;case"H":h=g.getHours(),b===u&&(h=c.show2400?24:0),j+=h>9?h:"0"+h;break;case"i":var e=g.getMinutes();j+=e>9?e:"0"+e;break;case"s":d=g.getSeconds(),j+=d>9?d:"0"+d;break;case"\\":k++,j+=c.timeFormat.charAt(k);break;default:j+=i}return j}function t(a,b){if(""===a||null===a)return null;if("object"==typeof a)return 3600*a.getHours()+60*a.getMinutes()+a.getSeconds();if("string"!=typeof a)return a;a=a.toLowerCase().replace(/[\s\.]/g,""),("a"==a.slice(-1)||"p"==a.slice(-1))&&(a+="m");var c="("+v.am.replace(".","")+"|"+v.pm.replace(".","")+"|"+v.AM.replace(".","")+"|"+v.PM.replace(".","")+")?",d=new RegExp("^"+c+"([0-9]?[0-9])\\W?([0-5][0-9])?\\W?([0-5][0-9])?"+c+"$"),e=a.match(d);if(!e)return null;var f=parseInt(1*e[2],10);if(f>24){if(b&&b.wrapHours===!1)return null;f%=24}var g=e[1]||e[5],h=f;if(12>=f&&g){var i=g==v.pm||g==v.PM;h=12==f?i?12:0:f+(i?12:0)}var j=1*e[3]||0,k=1*e[4]||0,l=3600*h+60*j+k;if(12>f&&!g&&b&&b._twelveHourTime&&b.scrollDefault){var m=l-b.scrollDefault();0>m&&m>=u/-2&&(l=(l+u/2)%u)}return l}var u=86400,v={am:"am",pm:"pm",AM:"AM",PM:"PM",decimal:".",mins:"mins",hr:"hr",hrs:"hrs"},w={init:function(b){return this.each(function(){var e=a(this),f=[];for(var g in a.fn.timepicker.defaults)e.data(g)&&(f[g]=e.data(g));var h=a.extend({},a.fn.timepicker.defaults,f,b);if(h.lang&&(v=a.extend(v,h.lang)),h=c(h),e.data("timepicker-settings",h),e.addClass("ui-timepicker-input"),h.useSelect)d(e);else{if(e.prop("autocomplete","off"),h.showOn)for(var i in h.showOn)e.on(h.showOn[i]+".timepicker",w.show);e.on("change.timepicker",k),e.on("keydown.timepicker",o),e.on("keyup.timepicker",p),h.disableTextInput&&e.on("keydown.timepicker",n),k.call(e.get(0),null,"initial")}})},show:function(c){var e=a(this),f=e.data("timepicker-settings");if(c&&c.preventDefault(),f.useSelect)return void e.data("timepicker-list").focus();h(e)&&e.blur();var k=e.data("timepicker-list");if(!e.prop("readonly")&&(k&&0!==k.length&&"function"!=typeof f.durationTime||(d(e),k=e.data("timepicker-list")),!b(k))){e.data("ui-timepicker-value",e.val()),j(e,k),w.hide(),k.show();var m={};f.orientation.match(/r/)?m.left=e.offset().left+e.outerWidth()-k.outerWidth()+parseInt(k.css("marginLeft").replace("px",""),10):m.left=e.offset().left+parseInt(k.css("marginLeft").replace("px",""),10);var n;n=f.orientation.match(/t/)?"t":f.orientation.match(/b/)?"b":e.offset().top+e.outerHeight(!0)+k.outerHeight()>a(window).height()+a(window).scrollTop()?"t":"b","t"==n?(k.addClass("ui-timepicker-positioned-top"),m.top=e.offset().top-k.outerHeight()+parseInt(k.css("marginTop").replace("px",""),10)):(k.removeClass("ui-timepicker-positioned-top"),m.top=e.offset().top+e.outerHeight()+parseInt(k.css("marginTop").replace("px",""),10)),k.offset(m);var o=k.find(".ui-timepicker-selected");if(!o.length){var p=t(l(e));null!==p?o=i(e,k,p):f.scrollDefault&&(o=i(e,k,f.scrollDefault()))}if(o&&o.length){var q=k.scrollTop()+o.position().top-o.outerHeight();k.scrollTop(q)}else k.scrollTop(0);return f.stopScrollPropagation&&a(document).on("wheel.ui-timepicker",".ui-timepicker-wrapper",function(b){b.preventDefault();var c=a(this).scrollTop();a(this).scrollTop(c+b.originalEvent.deltaY)}),a(document).on("touchstart.ui-timepicker mousedown.ui-timepicker",g),a(window).on("resize.ui-timepicker",g),f.closeOnWindowScroll&&a(document).on("scroll.ui-timepicker",g),e.trigger("showTimepicker"),this}},hide:function(c){var d=a(this),e=d.data("timepicker-settings");return e&&e.useSelect&&d.blur(),a(".ui-timepicker-wrapper").each(function(){var c=a(this);if(b(c)){var d=c.data("timepicker-input"),e=d.data("timepicker-settings");e&&e.selectOnBlur&&q(d),c.hide(),d.trigger("hideTimepicker")}}),this},option:function(b,e){return"string"==typeof b&&"undefined"==typeof e?a(this).data("timepicker-settings")[b]:this.each(function(){var f=a(this),g=f.data("timepicker-settings"),h=f.data("timepicker-list");"object"==typeof b?g=a.extend(g,b):"string"==typeof b&&(g[b]=e),g=c(g),f.data("timepicker-settings",g),h&&(h.remove(),f.data("timepicker-list",!1)),g.useSelect&&d(f)})},getSecondsFromMidnight:function(){return t(l(this))},getTime:function(a){var b=this,c=l(b);if(!c)return null;var d=t(c);if(null===d)return null;a||(a=new Date);var e=new Date(a);return e.setHours(d/3600),e.setMinutes(d%3600/60),e.setSeconds(d%60),e.setMilliseconds(0),e},isVisible:function(){var a=this,c=a.data("timepicker-list");return!(!c||!b(c))},setTime:function(a){var b=this,c=b.data("timepicker-settings");if(c.forceRoundTime)var d=f(t(a),c);else var d=s(t(a),c);return a&&null===d&&c.noneOption&&(d=a),m(b,d),b.data("timepicker-list")&&j(b,b.data("timepicker-list")),this},remove:function(){var a=this;if(a.hasClass("ui-timepicker-input")){var b=a.data("timepicker-settings");return a.removeAttr("autocomplete","off"),a.removeClass("ui-timepicker-input"),a.removeData("timepicker-settings"),a.off(".timepicker"),a.data("timepicker-list")&&a.data("timepicker-list").remove(),b.useSelect&&a.show(),a.removeData("timepicker-list"),this}}};a.fn.timepicker=function(b){return this.length?w[b]?this.hasClass("ui-timepicker-input")?w[b].apply(this,Array.prototype.slice.call(arguments,1)):this:"object"!=typeof b&&b?void a.error("Method "+b+" does not exist on jQuery.timepicker"):w.init.apply(this,arguments):this},a.fn.timepicker.defaults={appendTo:"body",className:null,closeOnWindowScroll:!1,disableTextInput:!1,disableTimeRanges:[],disableTouchKeyboard:!1,durationTime:null,forceRoundTime:!1,maxTime:null,minTime:null,noneOption:!1,orientation:"l",roundingFunction:function(a,b){if(null===a)return null;if("number"!=typeof b.step)return a;var c=a%(60*b.step);return c>=30*b.step?a+=60*b.step-c:a-=c,a==u&&b.show2400?a:a%u},scrollDefault:null,selectOnBlur:!1,show2400:!1,showDuration:!1,showOn:["click","focus"],showOnFocus:!0,step:30,stopScrollPropagation:!1,timeFormat:"g:ia",typeaheadHighlight:!0,useSelect:!1,wrapHours:!0}});;
//  MAIN APP CONTROLLER
( function($) {
    $.team = {
        app_url: false,
        content: false,
        sidebar: false,
        calendar: false,
        /* Need for title generation */
        title_pattern: "Team — %s",

        /** One-time initialization called from layout */
        init: function(options) {

            'is_debug|app_url|locales'.split('|').forEach(function(k) {
                $.team[k] = options[k];
            });

            // Set up CSRF
            $(document).ajaxSend(function(event, xhr, settings) {
                if (settings.type != 'POST') {
                    return;
                }

                var matches = document.cookie.match(new RegExp("(?:^|; )_csrf=([^;]*)"));
                var csrf = matches ? decodeURIComponent(matches[1]) : '';
                settings.data = settings.data || '';
                if (typeof(settings.data) == 'string') {
                    if (settings.data.indexOf('_csrf=') == -1) {
                        settings.data += (settings.data.length > 0 ? '&' : '') + '_csrf=' + csrf;
                        xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
                    }
                } else if (typeof(settings.data) == 'object') {
                    settings.data['_csrf'] = csrf;
                }
            });

            /* Main content router */
            $.team.content = new ContentRouter({
                $content: $("#t-content")
            });

            /* Sync for external calendars */
            $.team.setSync();

        },

        /* Used on each content page */
        setTitle: function( title_string ) {
            if (title_string) {
                var state = history.state;
                if (state) {
                    state.title = title_string;
                }
                document.title = $.team.title_pattern.replace("%s", title_string);
            }
        },

        /* Open dialog to confirm contact deletion */
        confirmContactDelete: function(contact_ids, o) {
            $.post('?module=users&action=prepareDelete', { id: contact_ids }, function(html) {
                var dialog = new TeamDialog({
                    html: html
                });

                if (o && o.onInit) {
                    o.onInit();
                }
                if (o && o.onCancel) {
                    dialog.$wrapper.on('close', o.onCancel);
                }
                if (o.onCancel || o.onDelete) {
                    dialog.$wrapper.on('contacts_deleted', function(e, contact_ids) {
                        if (o && o.onCancel) {
                            dialog.$wrapper.off('close', o.onCancel);
                        }
                        if (o && o.onDelete) {
                            o.onDelete(contact_ids);
                        }
                    });
                }
            });
        },

        /* Initialized in templates/layouts/Default.html */
        setSync: function () {
            var coef = Math.floor(Math.random() * 100) / 100,
                delay = 30000 + coef * 30000,
                xhr, timer;

            setTimeout(run, $.team.is_debug ? 100 : delay / 2);

            function run() {
                console.log('send sync request');
                $.post($.team.app_url + "?module=calendarExternal&action=sync")
                    .always(function () {
                        xhr = null;
                        timer = setTimeout(run, delay);
                    })
                    .error( function () {
                        return false;
                    });
            }
        }
    };
})(jQuery);

// Team :: ContentRouter
// Initialized in templates/layouts/Default.html
var ContentRouter = ( function($) {

    ContentRouter = function(options) {
        var that = this;

        // DOM
        that.$window = $(window);
        that.$content = options["$content"];

        // VARS
        that.api_enabled = ( window.history && window.history.pushState );

        // DYNAMIC VARS
        that.xhr = false;
        that.is_enabled = true;

        // INIT
        that.initClass();
    };

    ContentRouter.prototype.initClass = function() {
        var that = this;
        //
        that.bindEvents();
    };

    ContentRouter.prototype.bindEvents = function() {
        var that = this;

        // When user clicks a link that leads to team app backend,
        // load content via XHR instead.
        var full_app_url = window.location.origin + $.team.app_url;
        $(document).on('click', 'a', function(event) {
            var use_content_router = ( that.is_enabled && ( this.href.substr(0, full_app_url.length) == full_app_url ) );
            if (use_content_router) {
                event.preventDefault();
                that.load(this.href);
            }
        });

        $("#wa-app-team").on("click", "a", function(event) {
            event.stopPropagation();
        });

        if (that.api_enabled) {
            window.onpopstate = function(event) {
                event.stopPropagation();
                that.onPopState(event);
            };
        }
    };

    ContentRouter.prototype.load = function(content_uri, is_reload) {
        var that = this;

        var uri_has_app_url = ( content_uri.indexOf( $.team.app_url ) >= 0 );
        if (!uri_has_app_url) {
            // TODO:
            alert("Determine the path error");
            return false;
        }

        that.animate( true );

        if (that.xhr) {
            that.xhr.abort();
        }

        $(document).trigger('wa_before_load', {
            // for which these data ?
            content_uri: content_uri
        });

        that.xhr = $.get(content_uri, function(html) {
            if (!is_reload && that.api_enabled) {
                history.pushState({
                    reload: true,               // force reload history state
                    content_uri: content_uri    // url, string
                    // content: html,              // ajax html, string
                }, "", content_uri);
            }
            that.setContent( html );

            that.animate( false );

            that.xhr = false;
            $(document).trigger("wa_loaded");
        });
    };

    ContentRouter.prototype.reload = function() {
        var that = this,
            content_uri = (that.api_enabled && history.state && history.state.content_uri) ? history.state.content_uri : false;

        if (content_uri) {
            that.load(content_uri, true);
        }
    };

    ContentRouter.prototype.setContent = function( html ) {
        var that = this;

        that.$content.html( html );
    };

    ContentRouter.prototype.onPopState = function(event) {
        var that = this,
            state = ( event.state || false );

        if (state) {
            if (!state.content_uri) {
                // TODO:
                alert("Determine the path error");
                return false;
            }

            $(document).trigger('wa_before_load', {
                // for which these data?
                content_uri: state.content_uri
            });

            // CONTENT
            if (state.reload) {
                that.reload( state.content_uri );
            } else if (state.content) {
                that.setContent( state.content );
            }

            // TITLE
            if (state.title) {
                $.team.setTitle(state.title);
            }

            // SIDEBAR
            $.team.sidebar.selectLink( state.content_uri );

            $(document).trigger('wa_loaded');
        } else {
            location.reload();
        }
    };

    ContentRouter.prototype.animate = function( show ) {
        var that = this,
            $content = that.$content;

        $(".router-loading-indicator").remove();

        if (show) {
            var $header = $content.find(".t-content-header h1"),
                loading = '<i class="icon16 loading router-loading-indicator"></i>';

            if ($header.length) {
                $header.append(loading);
            }
        }
    };

    return ContentRouter;

})(jQuery);

// Team :: Dialog
// Helper used in many places.
var TeamDialog = ( function($) {

    TeamDialog = function(options) {
        var that = this;

        // DOM
        that.$wrapper = $(options["html"]);
        that.$block = false;
        that.is_full_screen = ( that.$wrapper.hasClass("is-full-screen") );
        if (that.is_full_screen) {
            that.$block = that.$wrapper.find(".t-dialog-block");
        }

        // VARS
        that.position = ( options["position"] || false );

        // DYNAMIC VARS
        that.is_closed = false;

        //
        that.userPosition = ( options["setPosition"] || false );

        // HELPERS
        that.onBgClick = ( options["onBgClick"] || false );
        that.onOpen = ( options["onOpen"] || function() {} );
        that.onClose = ( options["onClose"] || function() {} );
        that.onRefresh = ( options["onRefresh"] || false );
        that.onResize = ( options["onResize"] || false );

        // INIT
        that.initClass();
    };

    TeamDialog.prototype.initClass = function() {
        var that = this;
        // save link on dialog
        that.$wrapper.data("teamDialog", that);
        //
        that.show();
        //
        that.bindEvents();
    };

    TeamDialog.prototype.bindEvents = function() {
        var that = this,
            $document = $(document),
            $block = (that.$block) ? that.$block : that.$wrapper;

        // Delay binding close events so that dialog does not close immidiately
        // from the same click that opened it.
        setTimeout(function() {

            $document.on("click", close);
            $document.on("wa_before_load", close);
            that.$wrapper.on("close", close);

            // Click on background, default nothing
            if (that.is_full_screen) {
                that.$wrapper.on("click", ".t-dialog-background", function(event) {
                    if (!that.onBgClick) {
                        event.stopPropagation();
                    } else {
                        that.onBgClick(event);
                    }
                });
            }

            $block.on("click", function(event) {
                event.stopPropagation();
            });

            $(document).on("keyup", function(event) {
                var escape_code = 27;
                if (event.keyCode === escape_code) {
                    that.close();
                }
            });

            $block.on("click", ".js-close-dialog", function() {
                close();
            });

            function close() {
                if (!that.is_closed) {
                    that.close();
                }
                $document.off("click", close);
                $document.off("wa_before_load", close);
            }

            if (that.is_full_screen) {
                $(window).on("resize", onResize);
            }

            function onResize() {
                var is_exist = $.contains(document, that.$wrapper[0]);
                if (is_exist) {
                    that.resize();
                } else {
                    $(window).off("resize", onResize);
                }
            }

        }, 0);

    };

    TeamDialog.prototype.show = function() {
        var that = this;

        $("body").append( that.$wrapper );

        //
        that.setPosition();
        //
        that.onOpen(that.$wrapper, that);
    };

    TeamDialog.prototype.setPosition = function() {
        var that = this,
            $window = $(window),
            window_w = $window.width(),
            window_h = (that.is_full_screen) ? $window.height() : $(document).height(),
            $block = (that.$block) ? that.$block : that.$wrapper,
            wrapper_w = $block.outerWidth(),
            wrapper_h = $block.outerHeight(),
            pad = 10,
            css;

        if (that.position) {
            css = that.position;

        } else {
            var getPosition = (that.userPosition) ? that.userPosition : getDefaultPosition;
            css = getPosition({
                width: wrapper_w,
                height: wrapper_h
            });
        }

        if (css.left > 0) {
            if (css.left + wrapper_w > window_w) {
                css.left = window_w - wrapper_w - pad;
            }
        }

        if (css.top > 0) {
            if (css.top + wrapper_h > window_h) {
                css.top = window_h - wrapper_h - pad;
            }
        } else {
            css.top = pad;

            if (that.is_full_screen) {
                var $content = $block.find(".t-dialog-content");

                $content.hide();

                var block_h = $block.outerHeight(),
                    content_h = window_h - block_h - pad * 2;

                $content
                    .height(content_h)
                    .addClass("is-long-content")
                    .show();

            }
        }

        $block.css(css);

        function getDefaultPosition( area ) {
            // var scrollTop = $(window).scrollTop();

            return {
                left: parseInt( (window_w - area.width)/2 ),
                top: parseInt( (window_h - area.height)/2 ) // + scrollTop
            };
        }
    };

    TeamDialog.prototype.close = function() {
        var that = this;
        //
        that.is_closed = true;
        //
        that.$wrapper.remove();
        //
        that.onClose(that.$wrapper, that);
    };

    TeamDialog.prototype.refresh = function() {
        var that = this;

        if (that.onRefresh) {
            //
            that.onRefresh();
            //
            that.close();
        }
    };

    TeamDialog.prototype.resize = function() {
        var that = this,
            animate_class = "is-animated",
            do_animate = true;

        if (do_animate) {
            that.$block.addClass(animate_class);
        }

        that.setPosition();

        if (that.onResize) {
            that.onResize(that.$wrapper, that);
        }
    };

    return TeamDialog;

})(jQuery);

// Team :: Editable
// Helper used in many places. (group, profile)
var TeamEditable = ( function($) {

    TeamEditable = function(options) {
        var that = this;

        // DOM
        that.$wrapper = options["$wrapper"];

        // VARS
        that.save = ( options["onSave"] || function() {} );
        that.render = ( options["onRender"] || false );

        // DYNAMIC VARS
        that.is_empty = that.$wrapper.hasClass("is-empty");
        that.text = that.is_empty ? "" : that.$wrapper.text();
        that.$field = false;
        that.is_edit = false;

        // INIT
        that.initClass();
    };

    TeamEditable.prototype.initClass = function() {
        var that = this;
        //
        that.$field = that.renderField();
        //
        that.bindEvents();
    };

    TeamEditable.prototype.bindEvents = function() {
        var that = this;

        that.$wrapper.on("click", function() {
            that.toggle();
        });

        that.$field.on("blur", function() {
            that.save(that);
        });

        that.$field.on("keyup", function(event) {
            var is_enter = ( event.keyCode === 13 ),
                is_escape = ( event.keyCode === 27 );

            if (is_enter) {
                that.save(that);

            } else if (is_escape) {
                that.$field.val( that.text );
                that.toggle("hide");
            }
        });
    };

    TeamEditable.prototype.renderField = function() {
        var that = this,
            text = that.$wrapper.text(),
            $field = $('<input class="bold" type="text" name="" />');

        if (!that.is_empty) {
            $field.val(text);
        }

        var parent_w = that.$wrapper.parent().width(),
            wrapper_w = that.$wrapper.width(),
            max_w = 600,
            field_w;

        field_w = ( parent_w > max_w ) ? max_w : parent_w - 50;
        field_w = ( wrapper_w > field_w ) ? wrapper_w : field_w;

        $field
            .width(field_w)
            .hide();

        that.$wrapper.after($field);

        if (that.render) {
            that.render(that, $field);
        }

        return $field;
    };

    TeamEditable.prototype.toggle = function( show ) {
        var that = this;

        var id_edit = (show !== "hide");
        if (id_edit) {
            that.$wrapper.hide();
            that.$field.show().focus();
        } else {
            that.$wrapper.show();
            that.$field.hide();
        }

        that.is_edit = id_edit;
    };

    return TeamEditable;

})($);;
// Team :: Sidebar
// Initialized in templates/actions/Sidebar.html
var Sidebar = ( function($) {

    var ElasticBlock = ( function() {

        ElasticBlock = function(options) {
            var that = this;

            // DOM
            that.$window = $(window);
            that.$wrapper = options["$wrapper"];
            that.$block = options["$block"];
            that.$content = options["$content"];

            // VARS
            that.top_fix_class = "fixed-to-top";
            that.bottom_fix_class = "fixed-to-bottom";

            // DYNAMIC VARS
            that.debug = false;

            // INIT
            that.initClass();
        };

        ElasticBlock.prototype.log = function( string ) {
            var that = this;
            if (that.debug) {
                console.log( string );
            }
        };

        ElasticBlock.prototype.initClass = function() {
            var that = this;

            // Class names
            var top_fix_class = that.top_fix_class,
                bottom_fix_class = that.bottom_fix_class;

            // DOM
            var $window = that.$window,
                $wrapper = that.$wrapper,
                $block = that.$block;

            // VARS
            var display_width = Math.floor( $window.width() ),
                display_height = Math.floor( $window.height() ),
                block_top = $block.offset().top,
                wrapper_margin_top = 0,
                set_force = true;

            // DYNAMIC VARS
            var is_top_set = false,
                is_fixed_to_bottom = false,
                is_fixed_to_top = false,
                is_fixed_top_set = false,
                scroll_value = 0,
                content_height,
                block_width;

            $window
                .on("scroll", setScrollWatcher)
                .on("resize", setResizeWatcher);

            function setScrollWatcher() {
                if ($.contains(document, $block[0])) {
                    onScroll();
                } else {
                    unsetScrollWatcher();
                }
            }

            function setResizeWatcher() {
                if ($.contains(document, $block[0])) {
                    onResize();
                } else {
                    unsetResizeWatcher();
                }
            }

            function unsetScrollWatcher() {
                $window.off("scroll", setScrollWatcher);
            }

            function unsetResizeWatcher() {
                $window.off("scroll", setResizeWatcher);
            }

            function setTop( top ) {
                that.log("Manual top scroll position");

                $block
                    .css("top", top)
                    .width(block_width)
                    .removeClass(top_fix_class)
                    .removeClass(bottom_fix_class);

                is_top_set = true;
                is_fixed_to_top = is_fixed_to_bottom = is_fixed_top_set = false;
            }

            function setFixTop( top ) {
                that.log("Fixed to top scroll position");

                $block
                    .removeAttr("style")
                    .width(block_width)
                    .removeClass(bottom_fix_class)
                    .addClass(top_fix_class);

                if (top) {
                    is_fixed_top_set = true;
                    $block.css("top", top);
                }

                is_top_set = is_fixed_to_bottom = false;
                is_fixed_to_top = true;
            }

            function setFixBottom() {
                that.log("Fixed to bottom scroll position");

                $block
                    .removeAttr("style")
                    .width(block_width)
                    .removeClass(top_fix_class)
                    .addClass(bottom_fix_class);

                is_top_set = is_fixed_to_top = is_fixed_top_set = false;
                is_fixed_to_bottom = true;
            }

            function setDefault() {
                that.log("Default scroll position");

                $block
                    .removeAttr("style")
                    .removeClass(bottom_fix_class)
                    .removeClass(top_fix_class);

                is_top_set = is_fixed_to_top = is_fixed_to_bottom = is_fixed_top_set = false;
            }

            function onScroll() {
                var content_height = Math.floor( that.$content.outerHeight() ),
                    block_height = Math.floor( $block.outerHeight() ),
                    wrapper_height = Math.floor( $wrapper.height() ),
                    scroll_top = $window.scrollTop(),
                    dynamic_block_top = Math.floor( $block.offset().top ),
                    direction = ( scroll_value > scroll_top ) ? 1 : -1,
                    delta = scroll_top - block_top,
                    min_width = 760;

                block_width = $block.width();

                var active_scroll = ( !set_force && wrapper_height > display_height && display_width >= min_width && !(content_height && content_height < block_height));

                if (!active_scroll) {
                    if (set_force) {
                        setForceTop(scroll_top, block_height);
                    } else {
                        setDefault();
                        // unsetScrollWatcher();
                        // unsetResizeWatcher();
                    }
                } else {

                    var is_display_longer_block = ( display_height > block_height + wrapper_margin_top ),
                        is_above_block = (scroll_top <= block_top),
                        my_case = parseInt(dynamic_block_top + block_height - scroll_top - display_height),
                        is_middle_of_block = ( my_case > 0 ),
                        is_bottom_of_block = ( my_case <= 0 );

                    // If the height of the slider is smaller than the display, it's simple
                    if (is_display_longer_block) {

                        if (delta + wrapper_margin_top > 0) {
                            if (is_top_set || is_fixed_to_bottom || !is_fixed_to_top) {
                                setFixTop( wrapper_margin_top );
                            }
                        } else {
                            if (is_top_set || is_fixed_to_top || is_fixed_to_bottom || is_fixed_top_set) {
                                setDefault();
                            }
                        }

                        // If the height is larger than the screen
                    } else {

                        // If less than the original position to turn off
                        if (is_above_block) {
                            // that.log( 0 );
                            if (is_top_set || is_fixed_to_bottom || is_fixed_to_top) {
                                if (is_fixed_top_set) {
                                    var use_default = (dynamic_block_top <= block_top);
                                    if (use_default) {
                                        setDefault();
                                    }
                                } else {
                                    setDefault();
                                }
                            }

                            // If the above start after scrolling fix up
                        } else if (is_middle_of_block) {

                            if (direction > 0) {
                                var set_fix_top = (dynamic_block_top >= (wrapper_margin_top + scroll_top) );
                                if (set_fix_top && ( is_top_set || !is_fixed_to_top || is_fixed_to_bottom ) ) {
                                    if (wrapper_margin_top) {
                                        setFixTop( wrapper_margin_top );
                                    } else {
                                        setFixTop();
                                    }
                                }
                            } else {
                                if (!is_top_set || is_fixed_to_top || is_fixed_to_bottom) {
                                    setTop( dynamic_block_top - block_top );
                                }
                            }

                            // If the lower end
                        } else if (is_bottom_of_block) {
                            // If the direction of scrolling up
                            if (direction > 0) {
                                if (!is_top_set || is_fixed_to_top || is_fixed_to_bottom) {
                                    setTop( dynamic_block_top - block_top );
                                }

                                // If the direction of scrolling down
                            } else {
                                if (is_top_set || is_fixed_to_top || !is_fixed_to_bottom) {
                                    setFixBottom();
                                }
                            }
                            // In all other cases
                        } else {
                            if (!is_top_set || is_fixed_to_top || is_fixed_to_bottom) {
                                setTop( dynamic_block_top - block_top );
                            }
                        }

                    }
                }

                // Save New Data
                scroll_value = scroll_top;
            }

            function setForceTop(scroll_top, block_height) {
                var wrapper_height = Math.floor( $wrapper.height() ),
                    wrapper_top = Math.floor( $wrapper.offset().top ),
                    space_after = wrapper_height + wrapper_top - display_height - scroll_top,
                    hidden_block_part = block_height - display_height;

                set_force = false;

                var use_force = ( wrapper_height > block_height && scroll_top > block_top);

                if (use_force) {
                    if (hidden_block_part < space_after) {
                        setFixTop( wrapper_margin_top );
                    } else {
                        setFixBottom();
                    }
                }
            }

            function onResize() {
                display_width = Math.floor( $window.width() );
                display_height = Math.floor( $window.height() );
                setDefault();
                $window.trigger("scroll");
            }
        };

        return ElasticBlock;

    })();

    //

    Sidebar = function(options) {
        var that = this;

        // DOM
        that.$wrapper = options["$wrapper"];
        that.$groupsWrapper = that.$wrapper.find(".t-groups-list");
        that.$groups = that.$groupsWrapper.find("> li");
        that.$locationsWrapper = that.$wrapper.find(".t-locations-list");
        that.$locations = that.$locationsWrapper.find("> li");
        that.$searchForm = that.$wrapper.find(".t-search-form");

        // VARS
        that.app_url = options["app_url"];
        that.selected_class = "selected";
        that.storage_count_name = "team/sidebar_counts";
        that.can_sort = options["can_sort"];

        // DYNAMIC VARS
        that.link_count_update_date = false;
        that.$activeMenuItem = ( that.$wrapper.find("li." + that.selected_class + ":first") || false );
        that.counters = {};
        that.storageCount = false;
        that.is_locked = false;
        that.xhr = false;
        that.timer = 0;

        // INIT
        that.initClass();
    };

    Sidebar.prototype.initClass = function() {
        var that = this;
        //
        that.bindEvents();
        //
        that.setCounts();
        //
        that.initElasticBlock();
        //
        that.initUpdater();
        //
        if (that.can_sort) {
            that.initSortable();
        }
        //
        that.initDroppable();
        //
        if (!that.$activeMenuItem.length) {
            that.selectLink();
        }
    };

    Sidebar.prototype.bindEvents = function() {
        var that = this;

        // Change
        that.$wrapper.on("click", "li > a", function(event) {
            that.onLinkClick( $(this) );
        });

        that.$wrapper.on("click", ".js-add-user-group", function(event) {
            event.preventDefault();
            that.showGroupDialog();
        });

        that.$wrapper.on("click", ".js-add-user-location", function(event) {
            event.preventDefault();
            that.showGroupDialog( true );
        });

        that.$searchForm.on("submit", function(event) {
            event.preventDefault();
            var search_string = $.trim( that.$searchForm.find(".t-search-field").val() );
            if (search_string) {
                that.showSearch(search_string);
            }
        });

        $('#t-new-user-link').on('click', function(event) {
            event.preventDefault();
            event.stopPropagation();
            that.showInviteDialog();
        });
    };

    Sidebar.prototype.onLinkClick = function( $link ) {
        var that = this,
            uri = $link.attr("href");

        if (uri && uri.substr(0, 11) != 'javascript:' && !$link.hasClass('js-no-highlight')) {
            that.setItem( $link.closest("li") );
            $.team.setTitle( $link.text() );
        }
    };

    Sidebar.prototype.setItem = function( $item ) {
        var that = this;

        if (that.$activeMenuItem && that.$activeMenuItem[0] == $item[0]) {
            return false;
        }

        if (that.$activeMenuItem) {
            that.$activeMenuItem.removeClass(that.selected_class);
        }

        $item.addClass(that.selected_class);
        that.$activeMenuItem = $item;
    };

    Sidebar.prototype.selectLink = function( uri ) {
        var that = this,
            $link;

        if (uri) {
            $link = that.$wrapper.find('a[href="' + uri + '"]:first');
        }

        if ($link && $link.length) {
            that.setItem( $link.closest("li") );

        } else {
            var $links = that.$wrapper.find("a[href^='" + that.app_url + "']"),
                location_string = location.pathname,
                max_length = 0,
                link_index = 0;

            $links.each( function(index) {
                var $link = $(this),
                    href = $link.attr("href"),
                    href_length = href.length;

                if (location_string.indexOf(href) >= 0) {
                    if ( href_length > max_length ) {
                        max_length = href_length;
                        link_index = index;
                    }
                }
            });

            if (link_index || link_index === 0) {
                $link = $links.eq(link_index);
                that.setItem( $link.closest("li") );
            }
        }
    };

    Sidebar.prototype.reload = function() {
        var that = this,
            app_url = that.app_url,
            sidebar_uri = app_url + "?module=sidebar";

        clearTimeout(that.timer);

        if (that.xhr) {
            that.xhr.abort();
        }

        that.xhr = $.get(sidebar_uri, function(html) {
            that.xhr = false;
            that.$wrapper.replaceWith(html);
        });
    };

    Sidebar.prototype.showInviteDialog = function() {
        var that = this;
        if (!that.is_locked) {
            that.is_locked = true;
            $.get($.team.app_url + '?module=users&action=inviteform', function(response) {
                that.is_locked = false;
                new TeamDialog({
                    html: response
                });
            });
        }
    };

    Sidebar.prototype.showGroupDialog = function( is_location ) {
        var that = this,
            href = $.team.app_url + "?module=group&action=edit",
            data = {
                type: (is_location) ? "location" : "group"
            };

        if (!that.is_locked) {
            that.is_locked = true;

            $.get(href, data, function (response) {
                new TeamDialog({
                    html: response
                });
                that.is_locked = false;
            });
        }
    };

    // set counts
    Sidebar.prototype.setCounts = function() {
        var that = this,
            currentCount = getCountArray(),
            storageCount = getStorage( that.storage_count_name );

        that.storageCount = $.extend(true, {}, currentCount);

        if (storageCount) {
            $.each(storageCount, function(href, item) {
                var is_exist = ( href in currentCount),
                    is_number = ( is_exist && currentCount[href].count >= 0 ),
                    is_changed = ( is_number && currentCount[href].count != item.count ),
                    is_item_exist = ( item.count >= 0 );

                if (is_item_exist && is_changed) {
                    that.storageCount[href].count = item.count;
                    that.storageCount[href].date = item.date;
                    showCounter(href, currentCount[href].count, item.count, item.date);
                }
            });
        }

        that.setStorage();

        function showCounter( href, new_count, old_count, date ) {
            var is_good_href = ( href.indexOf( that.app_url ) >= 0 );
            if (is_good_href) {
                var $link = that.$wrapper.find('a[href="'+ href + '"]');
                if ($link.length) {
                    var delta_count = new_count - old_count,
                        $counter = $('<strong class="small highlighted t-indicator ' + ( (delta_count >= 0) ? 'is-green' : 'is-red' ) + '">' + delta_count + '</strong>');

                    if (delta_count >= 0) {
                        $link.append( $counter );
                        $link.one("click", function(event) {
                            event.preventDefault();
                            $counter.remove();
                            that.saveCount(href, new_count);
                            that.link_count_update_date = date;

                            $(document).one("wa_loaded", function() {
                                that.link_count_update_date = false;
                            });
                        });
                    }
                }
            }
        }

        function getStorage(storage_name) {
            var result = {},
                storage = localStorage.getItem(storage_name);

            if (storage) {
                result = JSON.parse(storage);
            }

            return result;
        }

        function getCountArray() {
            var result = {},
                $counts = that.$wrapper.find("li .js-count"),
                current_date = getDate();

            $counts.each( function() {
                var $count = $(this),
                    count = parseInt( $count.text() ),
                    $li = $count.closest("li"),
                    $link = $li.find("> a");

                if (count >= 0) {
                    that.counters[ $link.attr("href") ] = $count;
                    result[ $link.attr("href") ] = {
                        count: count,
                        date: current_date
                    }
                }
            });

            return result;
        }

        function getDate() {
            var date = new Date(),
                day = parseInt( date.getUTCDate() ),
                month = parseInt( date.getUTCMonth() ) + 1,
                year = parseInt( date.getUTCFullYear() ),
                hours = parseInt( date.getUTCHours() ),
                minutes = parseInt( date.getUTCMinutes() ),
                seconds = parseInt( date.getUTCSeconds() );

            return result = {
                    "year": year,
                    "month": month,
                    "day": day,
                    "hours": hours,
                    "minutes": minutes,
                    "seconds": seconds
                };
        }
    };

    // update count in class
    Sidebar.prototype.saveCount = function(href, count) {
        var that = this;
        if (href in that.storageCount) {
            that.storageCount[href].count = count;
        }
        that.setStorage();
    };

    // render count in dom
    Sidebar.prototype.updateCount = function(href, count) {
        var that = this,
            $counter;

        if ( !(href && (count || count === 0) ) ) {
            return false;
        }

        $counter = ( that.counters[href] || false );

        that.saveCount(href, count);

        if ($counter.length) {
            $counter.text(count);
        } else {
            that.reload();
        }
    };

    // save to local storage
    Sidebar.prototype.setStorage = function() {
        var that = this;

        localStorage.setItem( that.storage_count_name , JSON.stringify( that.storageCount ) );
    };

    Sidebar.prototype.initElasticBlock = function() {
        var that = this;

        // Init elastic block
        $(document).ready( function() {
            new ElasticBlock({
                $wrapper: $("#wa-app"),
                $block: that.$wrapper,
                $content: $("#t-content")
            });

            var $window = $(window);
            if ( $window.scrollTop() > 0 ) {
                $window.trigger("scroll");
            }
        });
    };

    Sidebar.prototype.initUpdater = function() {
        var that = this,
            time = 1000 * 60 * 5;

        that.timer = setTimeout( function() {
            if ( $.contains(document, that.$wrapper[0]) ) {
                that.reload();
            }
        }, time);
    };

    Sidebar.prototype.initSortable = function() {
        var that = this,
            $groupsWrapper = that.$groupsWrapper,
            $groups = that.$groups,
            $locationsWrapper = that.$locationsWrapper,
            $locations = that.$locations,
            href = $.team.app_url + "?module=group&action=sortSave",
            item_index,
            xhr = false;

        if ($groups.length > 1) {
            $groupsWrapper.sortable({
                items: "> li",
                axis: "y",
                delay: 200,
                tolerance: "pointer",
                start: function(event,ui) {
                    item_index = ui.item.index();
                },
                stop: function(event,ui) {
                    ui.item.removeAttr("style");
                    if (item_index != ui.item.index() ) {
                        var sortArray = getSortArray( $groupsWrapper );
                        saveSort(href, {
                            groups: sortArray
                        });
                    }
                }
            });
        }

        if ($locations.length > 1) {
            $locationsWrapper.sortable({
                items: "> li",
                axis: "y",
                delay: 200,
                tolerance: "pointer",
                start: function(event,ui) {
                    item_index = ui.item.index();
                },
                stop: function(event,ui) {
                    ui.item.removeAttr("style");
                    if (item_index != ui.item.index() ) {
                        var sortArray = getSortArray( $locationsWrapper );
                        saveSort(href, {
                            locations: sortArray
                        });
                    }
                }
            });
        }

        function getSortArray( $list ) {
            var result = [],
                $items = $list.find("> li");

            $items.each( function() {
                var $item = $(this),
                    id = $item.data("id");

                if (id && id > 0) {
                    result.push(id);
                }
            });

            return result;
        }

        function saveSort(href, data) {
            if (xhr) {
                xhr.abort();
                xhr = false;
            }
            xhr = $.post(href, data, function() {
                xhr = false;
            });
        }

    };

    Sidebar.prototype.initDroppable = function() {
        var that = this,
            drop_class = "js-drop-place",
            hover_class = "is-hovered",
            xhr = false;

        that.$groups.each( function() {
            var $group = $(this),
                is_drop_place = $group.hasClass(drop_class);

            if (is_drop_place) {
                $group.droppable({
                    tolerance: "pointer",
                    hoverClass: hover_class,
                    over: function(event, ui) {
                        var is_drag_item = ui.draggable.hasClass("ui-draggable");
                        if (!is_drag_item) {
                            $group.removeClass(hover_class);
                        }
                    },
                    drop: function(event, ui) {
                        addUserToGroup( $(this), ui.draggable );
                    }
                });
            }

        });

        that.$locations.each( function() {
            var $location = $(this),
                is_drop_place = $location.hasClass(drop_class);

            if (is_drop_place) {
                $location.droppable({
                    tolerance: "pointer",
                    hoverClass: hover_class,
                    over: function(event, ui) {
                        var is_drag_item = ui.draggable.hasClass("ui-draggable");
                        if (!is_drag_item) {
                            $location.removeClass(hover_class);
                        }
                    },
                    drop: function (event, ui) {
                        addUserToGroup($(this), ui.draggable);
                    }
                });
            }
        });

        function addUserToGroup( $dropZone, $item ) {
            var group_id = parseInt( $dropZone.data("group-id") ),
                user_id = parseInt( $item.data("user-id") ),
                href = $.team.app_url + "?module=group&action=userAdd",
                data;

            if ( !(group_id > 0 && user_id > 0) ) {
                return false;
            }

            data = {
                user_id: user_id,
                group_id: group_id
            };

            if (xhr) {
                xhr.abort();
            }

            xhr = $.post(href, data, function(response) {
                if (response.status == "ok") {
                    $.team.sidebar.reload();
                }
                xhr = false;
            });
        }
    };

    Sidebar.prototype.showSearch = function(search_string) {
        var that = this;

        search_string = encodeURIComponent(search_string);

        var content_uri = that.app_url + "search/" + search_string + "/";

        $.team.content.load( content_uri );
    };

    // TODO: delete it before release
    // Sidebar.prototype.setDemo = function() {
    //     var that = this,
    //         storageCount = {};
    //
    //     storageCount[ that.app_url ] = Math.floor( Math.random() * 15 );
    //     storageCount[ that.app_url + "online/" ] = Math.floor( Math.random() * 15 );
    //     for (var i = 1; i < 20; i++) {
    //         storageCount[ that.app_url + "group/" + i + "/" ] = Math.floor( Math.random() * 15 ) ;
    //     }
    //
    //     localStorage.setItem( that.storage_count_name , JSON.stringify(storageCount) );
    // };

    return Sidebar;

})(jQuery);
;
// Pages

// Team :: Calendar Page
var CalendarPage = ( function($) {

    // Team :: Date Filter
    var DateFilter = ( function($) {

        DateFilter = function(options) {
            var that = this;

            // DOM
            that.$wrapper = options["$wrapper"];
            that.$monthSelect = that.$wrapper.find(".month");
            that.$yearSelect = that.$wrapper.find(".year");

            // VARS
            that.filters_href = options["filters_href"];

            // DYNAMIC VARS
            that.month = parseInt( that.$monthSelect.val() );
            that.year = parseInt( that.$yearSelect.val() );

            // INIT
            that.initClass();
        };

        DateFilter.prototype.initClass = function() {
            var that = this;

            that.$monthSelect.on("change", function() {
                var month = $(this).val();
                if (month) {
                    that.month = parseInt(month);
                }
                that.useFilter();
                return false;
            });

            that.$yearSelect.on("change", function() {
                var year = $(this).val();
                if (year) {
                    that.year = parseInt(year);
                }
                that.useFilter();
                return false;
            });

            that.$wrapper.on("click", ".t-arrow", function() {
                var $arrow = $(this);
                if ($arrow.hasClass("left")) {
                    that.changeMonth( false );
                }
                if ($arrow.hasClass("right")) {
                    that.changeMonth( true );
                }
                that.useFilter();
                return false;
            });

        };

        DateFilter.prototype.changeMonth = function( next ) {
            var that = this;

            if (next) {
                if (that.month >= 12) {
                    that.month = 1;
                    that.year++;
                } else {
                    that.month++;
                }
            } else {
                if (that.month <= 1) {
                    that.month = 12;
                    that.year--;
                } else {
                    that.month--;
                }
            }
        };

        DateFilter.prototype.useFilter = function() {
            var that = this,
                start_value = that.year + "-" + ( (that.month > 9) ? that.month : "0" + that.month) + "-01",
                start_string = "start=" + start_value,
                content_uri;

            var location = that.filters_href.split("?"),
                pathname = location[0],
                search = ( location[1] || "" ),
                searchArray = (search.indexOf("&") >= 0) ? search.split("&") : [search],
                start_index = false;

            if (searchArray.length) {
                $.each(searchArray, function(index, item) {
                    var name = item.split("=")[0];
                    if (name == "start") {
                        start_index = index;
                    }
                });
            }

            // Add "month" get param
            if (start_index || start_index === 0) {
                searchArray[start_index] = start_string;
            } else {
                searchArray.push(start_string);
            }

            content_uri = pathname + "?" + searchArray.join("&");

            $.team.content.load(content_uri);
        };

        return DateFilter;

    })(jQuery);

    CalendarPage = function(options) {
        var that = this;

        // DOM
        that.$wrapper = options["$wrapper"];
        that.$dateFilter = options["$dateFilter"];


        // VARS
        that.filters_href = options["filters_href"];
        that.user_id = options["user_id"];
        that.local_storage = new $.store();

        // DYNAMIC VARS

        // INIT
        that.initClass();
    };

    CalendarPage.prototype.initClass = function() {
        var that = this;

        // Init Date Filter
        new DateFilter({
            $wrapper: that.$dateFilter,
            filters_href: that.filters_href
        });

        //
        that.initInfoBlock();
    };

    CalendarPage.prototype.initInfoBlock = function () {
        var that = this,
            $info_block = that.$wrapper.find(".t-info-notice-wrapper"),
            storage = that.local_storage,
            key = "team/calendar_info_warn_block_hide";

        if (storage.get(key)) {
            $info_block.hide();
        } else {
            $info_block.show();
        }

        $info_block.find(".t-info-notice-toggle").on("click", function () {
            storage.set(key, 1);
            $info_block.hide();
        });
    };

    return CalendarPage;

})(jQuery);

// Team :: Calendar
var TeamCalendar = ( function($) {

    TeamCalendar = function(options) {
        var that = this;

        // DOM
        that.$wrapper = options["$wrapper"];
        that.$rows = that.$wrapper.find(".t-week-row");

        // VARS
        that.days_count = 7;
        that.weeks_count = that.$rows.length;
        that.selected_class = "is-selected";
        that.active_class = "is-active";
        that.locales = options["locales"];
        that.is_profile = options["is_profile"];

        //
        that.event_view_uri = "?module=schedule&action=eventView";
        that.event_edit_uri = "?module=schedule&action=eventEdit";
        that.day_uri = "?module=schedule&action=day";
        that.user_id = options["user_id"];
        that.has_right_to_change = options["has_right_to_change"];
        that.selected_user_id = options["selected_user_id"];
        that.selected_calendar_id = options["selected_calendar_id"];
        that.period_start = options["period_start"];
        that.period_end = options["period_end"];
        that.daysArray = getDays( that.$rows );     // days matrix

        // DYNAMIC VARS
        that.wrapper_o = that.$wrapper.offset();
        that.wrapper_w = that.$wrapper.width();
        that.wrapper_h = that.$wrapper.height();
        that.day_w = 0;
        that.day_h = 0;
        that.dialogs = [];
        that.xhr = false;

        // SELECTION
        that.start = false;         // {week: int, day: int}
        that.end = false;           // {week: int, day: int}
        that.$selectedDays = [];    // arrays of selected $days
        that.is_locked = false;     // lock for move

        // INIT
        that.bindEvents();
        //
        that.initHoverOnDay();
        //
        that.initMove();
    };

    TeamCalendar.prototype.bindEvents = function() {
        var that = this,
            $document = $(document),
            can_add_event = that.has_right_to_change;

        if (can_add_event) {
            // Block out the selection by clicking on the event
            that.$wrapper.find(".show-full-days-events, .t-event-wrapper").on("mousedown", function(event) {
                event.stopPropagation();
                that.clearSelection();
            });

            // Remove selection when you click outside the block
            $document.on("mousedown", function() {
                that.clearSelection();
            });

            // Selection block on mouse down/move
            that.$wrapper.on("mousedown", function(event) {
                event.stopPropagation();
                var dialog_was_exist = that.closeDialogs();
                if (!dialog_was_exist) {
                    // Start
                    that.onMouseDown(event);

                    // Add nexts events
                    that.$wrapper.on("mousemove", move);
                    $document.on("mouseup", mouseUp);
                }
                return false;
            });
        }

        // Show full days events
        that.$wrapper.on("click", ".show-full-days-events", function(event) {
            event.preventDefault();
            var dialog_was_exist = that.closeDialogs();
            if (!dialog_was_exist) {
                that.showFullDayEvents( $(this) );
            }
        });

        // Show event details
        that.$wrapper.on("click", ".t-event-block.js-view-event", function(event) {
            event.preventDefault();
            var dialog_was_exist = that.closeDialogs();
            if (!dialog_was_exist) {
                that.showEventDetails( $(this).closest(".t-event-wrapper") );
            }
        });

        // FUNCTIONS

        function move(event) {
            if (!that.is_locked) {
                that.is_locked = true;
                that.onMouseMove(event);

                setTimeout( function () {
                    that.is_locked = false;
                }, 10);
            }
            return false;
        }

        function mouseUp() {
            that.onMouseUp();
            that.$wrapper.off("mousemove", move);
            $document.off("mouseup", mouseUp);
            return false;
        }
    };

    TeamCalendar.prototype.showFullDayEvents = function( $link ) {
        var that = this,
            events_id = $link.data("events-id").split(","),
            date = $link.data("date"),
            data = {
                date: date,
                id: events_id
            };

        if (that.xhr) {
            that.xhr.abort();
            that.xhr = false;
        }

        that.xhr = $.post( that.day_uri, data, function(html) {
            var $linkW = $link.closest(".t-action-wrapper"),
                $row = $linkW.closest(".t-week-row"),
                cell_o = {
                    top: $row.offset().top,
                    left: $linkW.offset().left,
                    width: $linkW.outerWidth(),
                    height: $row.outerHeight()
                };

            var dialog = new TeamDialog({
                html: html,
                setPosition: setPosition
            });

            that.addDialog(dialog);

            function setPosition(area) {
                var wrapper_w = area.width,
                    wrapper_h = area.height,
                    delta_w = ( (wrapper_w - cell_o.width)/2 ),
                    delta_h = ( (wrapper_h - cell_o.height)/2 );

                var top = cell_o.top - ( (delta_h > 0) ? delta_h : 0 ),
                    left = cell_o.left - ( (delta_w > 0) ? delta_w : 0 );

                var right_space = ( $(window).width() - (left + wrapper_w) );
                if (right_space < 0) {
                    var padding_r = 10;
                    left -= Math.abs(right_space) + padding_r;
                }

                return {
                    top: top,
                    left: left
                }
            }
        });
    };

    TeamCalendar.prototype.showEventDetails = function( $event ) {
        var that = this,
            event_id = $event.data("id"),
            data = {
                "data[id]": event_id
            };

        if (that.xhr) {
            that.xhr.abort();
            that.xhr = false;
        }

        that.xhr = $.post( that.event_view_uri, data, function(html) {
            var dialog = new TeamDialog({
                html: html
            });
            that.addDialog(dialog);
        });
    };

    TeamCalendar.prototype.createEvent = function() {
        var that = this,
            $startDay = that.daysArray[that.start.week - 1][that.start.day - 1],
            $endDay = that.daysArray[that.end.week - 1][that.end.day - 1],
            start_date = $startDay.data("date"),
            end_date = $endDay.data("date"),
            data = {
                "data[start]": false,
                "data[end]": false,
                "data[contact_id]": ( that.selected_user_id || that.user_id )
            };

        var current_date = new Date(),
            current_hour = current_date.getHours();

        data["data[start]"] = start_date.replace("00:00:00", ( (current_hour >= 23) ? "23:59:59" : ( current_hour + 1 ) + ":00:00"  ) );
        data["data[end]"] = end_date.replace("00:00:00", ( (current_hour >= 22) ? "23:59:59" : ( current_hour + 2 ) + ":00:00"  ) );

        if (that.selected_calendar_id) {
            data["data[calendar_id]"] = that.selected_calendar_id;
        }

        if (that.xhr) {
            that.xhr.abort();
            that.xhr = false;
        }

        that.xhr = $.post( that.event_edit_uri, data, function(response) {
            var dialog = new TeamDialog({
                html: response
            });
            that.addDialog(dialog);
        });

    };

    TeamCalendar.prototype.onMouseDown = function(event) {
        var that = this;
        //
        that.start = that.getDayPosition( event );
        that.end = that.start;
        //
        that.markDays();
    };

    TeamCalendar.prototype.onMouseMove = function(event) {
        var that = this,
            newPosition = that.getDayPosition( event );

        if ( !(that.end && that.end.week == newPosition.week && that.end.day == newPosition.day) ) {
            that.end = newPosition;
            that.markDays();
        }
    };

    TeamCalendar.prototype.initHoverOnDay = function(event) {
        var that = this,
            $wrapper = that.$wrapper,
            $hoverDay = false,
            active_class = "is-highlighted";

        $wrapper
            .on("mousemove", onMove)
            .on("mouseleave", onLeave);

        function onMove(event) {
            var day = that.getDayPosition(event),
                $day = getDay( day, that.daysArray );

            var $target = $(event.target);
            if ( $target.hasClass("t-event-block") || $target.closest(".t-event-block").length ) {
                clear();
                return false;
            }

            if (that.start) {
                clear();
                return false;
            }

            if (!$day) {
                clear();
                return false;
            } else if ($day.hasClass(active_class)) {
                return false;
            }

            if ($hoverDay) {
                clear();
            }

            markDay($day);
        }

        function onLeave() {
            clear();
        }

        function markDay( $day ) {
            $day.addClass(active_class);
            $hoverDay = $day;
        }

        function clear() {
            if ($hoverDay) {
                $hoverDay.removeClass(active_class);
            }
            $hoverDay = false;
        }

        function getDay(day, array ) {
            var result = false;

            if (array[day.week - 1] && array[day.week - 1][day.day - 1]) {
                result = array[day.week - 1][day.day - 1];
            }

            return result;
        }
    };

    TeamCalendar.prototype.onMouseUp = function() {
        var that = this;

        if ( that.start.week > that.end.week || ( that.start.week == that.end.week && that.start.day > that.end.day ) ) {
            var end = {
                    week: that.start.week,
                    day: that.start.day
                };

            that.start = {
                week: that.end.week,
                day: that.end.day
            };
            that.end = end;
        }

        that.createEvent();

        that.start = false;
        that.end = false;
    };

    TeamCalendar.prototype.initMove = function() {
        var schedule = this,
            $wrapper = schedule.$wrapper,
            $events = $wrapper.find(".js-move-event"),
            $event = false,
            is_locked = false,
            xhr;

        $events.draggable({
            helper: "clone",
            appendTo: "body",
            cursor: "move",
            delay: 200,
            cursorAt: {
                top: 11,
                left: 16
            },
            start: function(event, ui) {
                var $_event = $(ui.helper.context),
                    $clone = ui.helper;

                $event = $_event;

                var size = parseInt( $event.closest(".t-column").attr("colspan") ),
                    hint = ( $_event.data("move-hint") || false );

                if (hint) {
                    $clone.find(".t-event-block").append("<span class='t-day-count'>(" + hint + ")</span>");
                }

                $clone.addClass("is-clone").css({
                    minWidth: parseInt( $_event.width() / size ) + "px",
                    height: $_event.height() + "px"
                });
            },
            drag: function(event, ui) {
                if (!is_locked) {
                    is_locked = true;
                    setTimeout( function() {
                        is_locked = false;
                    }, 100);
                    onMove(event);
                }
            },
            stop: function(event, ui) {
                schedule.clearSelection();
                $event = false;
            }
        });

        $wrapper.droppable({
            drop: function(event) {
                onDrop(event)
            }
        });

        function onDrop(event) {
            var day = schedule.getDayPosition(event),
                $day = schedule.daysArray[day.week - 1][day.day - 1];

            if (!$day) {
                if (console && console.log) {
                    console.log("error: date is not exist");
                }
                return false;
            }

            var href = $.team.app_url + "?module=schedule&action=eventMove",
                data = {
                    id: parseInt( $event.data("id") ),
                    start: $day.data("date").replace(" 00:00:00", "")
                };

            if (xhr) {
                xhr.abort();
            }

            xhr = $.post(href, data, function(response) {
                if (response.status == "ok") {
                    schedule.reload();
                }
            }, "json");
        }

        function onMove(event) {
            var wrapper_o = $wrapper.offset(),
                x = [wrapper_o.left, wrapper_o.left + $wrapper.outerWidth()],
                y = [wrapper_o.top, wrapper_o.top + $wrapper.outerHeight()];

            // clear
            schedule.clearSelection();
            //
            if (event.pageX <= x[0] || event.pageX >= x[1]) {
                return false;
            }
            if (event.pageY <= y[0] || event.pageY >= y[1]) {
                return false;
            }

            // marking
            var size = parseInt( ($event.data("day-count") || $event.closest(".t-column").attr("colspan") ) );
            schedule.start = schedule.getDayPosition(event);
            schedule.end = getEnd(schedule.daysArray, schedule.start, size);
            schedule.markDays();

            function getEnd(daysArray, start, size) {
                var result = {
                        week: start.week,
                        day: start.day
                    },
                    days_after_start =  (7 - start.day);

                size = size - 1; // today = start

                if (size <= days_after_start) {
                    result.day = result.day + size;
                } else {
                    result.week = result.week + 1;
                    result.day = (size - days_after_start);

                    if (result.week > daysArray.length) {
                        result = {
                            week: daysArray.length,
                            day: 7
                        }
                    }
                }

                return result;
            }
        }
    };

    TeamCalendar.prototype.markDays = function() {
        var that = this;

        //
        that.deselectDays();

        //
        var start = $.extend({}, that.start),
            end = $.extend({}, that.end);

        // Swap data in motion to the left
        if (start.week > end.week) {
            start = $.extend({}, that.end);
            end = $.extend({}, that.start);
        }

        var week_start = start.week,
            week_end = end.week;

        for ( var week_index = week_start; week_index <= week_end; week_index++ ) {
            var day_start, day_end;

            // If the movement within one week
            if (week_start == week_end) {
                day_start = start.day;
                day_end = end.day;

                // Swap data in motion to the left
                if (day_start > day_end) {
                    day_start = end.day;
                    day_end = start.day;
                }

                // If this initial week
            } else if (week_index == week_start) {
                day_start = start.day;
                day_end = that.days_count;

                // If this is the final week
            } else if (week_index == week_end) {
                day_start = 1;
                day_end = end.day;

                // If this intermediate week
            } else {
                day_start = 1;
                day_end = that.days_count;
            }

            // Day render
            for ( var day_index = day_start; day_index <= day_end; day_index++ ) {
                render(week_index, day_index);
            }
        }

        function render(week_index, day_index) {
            if ( !(week_index > 0 && day_index > 0) ) {
                return false;
            }

            var $day = that.daysArray[week_index - 1][day_index - 1];
            if ($day.length) {
                $day.addClass(that.selected_class);
                that.$selectedDays.push($day);
            } else {
                console.log("Error: Day isn't exist");
                return false;
            }
        }
    };

    TeamCalendar.prototype.getDayPosition = function( event ) {
        var that = this;

        that.wrapper_o = that.$wrapper.offset();
        that.wrapper_w = that.$wrapper.width();
        that.wrapper_h = that.$wrapper.height();
        that.day_w = that.wrapper_w/that.days_count;
        that.day_h = that.wrapper_h/that.weeks_count;

        var lift_offset = {
            top: (event.pageY - that.wrapper_o.top),
            left: (event.pageX - that.wrapper_o.left)
        };

        var week = parseInt(lift_offset.top/that.day_h) + ( (lift_offset.top % that.day_h > 0 ) ? 1 : 0 );
        var day = parseInt(lift_offset.left/that.day_w) + ( (lift_offset.left % that.day_w > 0 ) ? 1 : 0 );

        return {
            week: week,
            day: day
        }
    };

    TeamCalendar.prototype.deselectDays = function() {
        var that = this;

        if (that.$selectedDays.length) {
            $.each(that.$selectedDays, function() {
                $(this).removeClass(that.selected_class);
            });
            that.$selectedDays = [];
        }
    };

    TeamCalendar.prototype.clearSelection = function() {
        var that = this;
        that.deselectDays();
        that.start = false;
        that.end = false;
    };

    TeamCalendar.prototype.reload = function() {
        var that = this,
            href = "?module=schedule&action=inc",
            data = {};

        that.closeDialogs();

        if (that.selected_user_id) {
            data.user = that.selected_user_id;
        }

        if (that.selected_calendar_id) {
            data.calendar = that.selected_calendar_id;
        }

        if (that.period_start) {
            data.start = that.period_start;
        }

        if (that.period_end) {
            data.end = that.period_end;
        }

        if (that.is_profile) {
            data.period = 1;
        }

        $.get(href, data, function(html) {
            $.team.calendar = false;
            that.$wrapper.closest(".t-calendar-wrapper").replaceWith(html);
        });
    };

    TeamCalendar.prototype.addDialog = function( dialog ) {
        var that = this;
        that.dialogs.push(dialog);
    };

    TeamCalendar.prototype.closeDialogs = function() {
        var that = this,
            result = false;

        // Prev Dialog
        if (that.dialogs.length) {

            $.each(that.dialogs, function(index, dialog) {
                if ( $.contains(document, dialog.$wrapper[0]) ) {
                    dialog.close();
                    result = true;
                }
            });

            // or $.each()splice
            that.dialogs = [];
        }

        // DatePicker
        var $datePicker = $("#ui-datepicker-div");
        if ($datePicker.length) {
            $(document).trigger("mousedown")
        }

        return result;
    };

    return TeamCalendar;

    function getDays( $rows ) {
        var result = [];

        $rows.each( function() {
            var $row = $(this),
                row_result = [];

            $row.find(".t-day-ornament").each( function() {
                row_result.push( $(this) );
            });

            result.push(row_result);

        });

        return result;
    }

})(jQuery);

// Dialogs

// Team :: Calendar :: Day Dialog
var DayEventsDialog = ( function($) {

    DayEventsDialog = function(options) {
        var that = this;

        // DOM
        that.$wrapper = options["$wrapper"];

        // VARS
        that.event_view_uri = "?module=schedule&action=eventView";

        // DYNAMIC VARS
        that.dialog = false;
        that.xhr = false;

        // INIT
        that.initClass();
    };

    DayEventsDialog.prototype.initClass = function() {
        var that = this;

        // Show event details
        that.$wrapper.on("click", ".t-event-block.js-view-event", function(event) {
            event.preventDefault();
            that.showEventDetails( $(this).closest(".t-event-wrapper") );
        });
    };

    DayEventsDialog.prototype.showEventDetails = function( $event ) {
        var that = this,
            event_id = $event.data("id"),
            data = {
                "data[id]": event_id
            };

        if (that.xhr) {
            that.xhr.abort();
            that.xhr = false;
        }

        that.xhr = $.post( that.event_view_uri, data, function(response) {
            that.dialog = new TeamDialog({
                html: response
            });
        });
    };

    return DayEventsDialog;

})(jQuery);

// Team :: Calendar :: Event Edit
var EventEditDialog = ( function($) {

    EventEditDialog = function(options) {
        var that = this;

        // DOM
        that.$wrapper = options["$wrapper"];
        that.$form = that.$wrapper.find("form");
        that.$statusToggle = that.$wrapper.find(".t-status-toggle");
        that.$calendarToggle = that.$wrapper.find(".t-calendar-toggle");
        that.$typeToggle = that.$wrapper.find(".t-type-toggle");
        that.$userToggle = that.$wrapper.find(".t-user-toggle");
        that.$startAltField = that.$wrapper.find("input[name='data[start_alt]']");
        that.$endAltField = that.$wrapper.find("input[name='data[end_alt]']");
        that.$summaryField = that.$form.find("input[name='data[summary]']");

        // VARS
        that.teamDialog = that.$wrapper.data("teamDialog");
        that.active_class = "is-active";
        that.extended_class = "is-extended";
        that.selected_class = "selected";
        that.has_error_class = "error";
        that.locales = options["locales"];
        that.event_id = options["event_id"];
        that.calendars = getCalendarsArray( that.$calendarToggle );
        that.users = getUsersArray( that.$userToggle );

        // DYNAMIC VARS
        that.$activeStatusToggle = ( that.$statusToggle.find("." + that.active_class) || false );
        that.is_status = options["is_status"];
        that.is_locked = false;
        that.is_changed = false;
        that.user_id = options["user_id"];
        that.calendar_id = options["calendar_id"];
        that.summary = options["summary"];
        that.summary_type = options["summary_type"];
        that.start_date_locale = false;
        that.end_date_locale = false;

        // INIT
        that.initClass();
    };

    EventEditDialog.prototype.initClass = function() {
        var that = this;
        //
        that.initDatePicker();
        //
        that.initTimePicker();
        //
        that.bindEvents();
        //
        that.setStatusLocale();

        if (that.is_status) {
            //
            that.generateStatusTypes();
            //
            that.generatePreview();
        }
    };

    EventEditDialog.prototype.bindEvents = function() {
        var that = this;

        that.$form.on("submit", function(event) {
            event.preventDefault();
            if (!that.is_locked) {
                that.save( that.$form );
            }
            return false;
        });

        that.$form.on("click", ".js-delete-event", function(event) {
            event.preventDefault();
            if (!that.is_locked) {
                that.showDeleteConfirm();
            }
        });

        that.$statusToggle.on("click", ".t-toggle-button", function() {
            that.changeStatus( $(this) );
            return false;
        });

        that.$calendarToggle.on("click", ".menu-v a", function(event) {
            event.preventDefault();
            that.changeCalendar( $(this) );
        });

        that.$startAltField.on("change", function() {
            that.setStatusLocale();
            that.generateStatusTypes();
            that.generatePreview();
        });

        that.$endAltField.on("change", function() {
            that.setStatusLocale();
            that.generateStatusTypes();
            that.generatePreview();
        });

        that.$summaryField.on("change", function() {
            that.summary = $(this).val();
            that.summary_type = "custom";
        });

        that.$form.on("change", "input[name='data[status_summary]']", function() {
            that.summary = $(this).val();
            that.$summaryField.val( that.summary );
        });

        that.$form.on("change", "textarea[name=\"data[description]\"]", function() {
            var value = $(this).val();
            that.$form.find("textarea[name=\"data[status_description]\"]").val(value);
        });

        that.$form.on("change", "textarea[name=\"data[status_description]\"]", function() {
            var value = $(this).val();
            that.$form.find("textarea[name=\"data[description]\"]").val(value);
        });

        that.$form.on("summaryChange", function() {
            that.$summaryField.val( that.summary );
        });

        if (that.$userToggle.length) {
            that.$userToggle.on("click", ".menu-v a", function(event) {
                event.preventDefault();
                that.changeUser( $(this) );
            });
        }

        that.$form.on("change", ".js-extended-date", function() {
            that.dateToggle( $(this) );
            return false;
        });

        // Remove errors hints
        var $fields = that.$form.find("input");
        $fields.on("mousedown", function() {
            var $field = $(this),
                has_error = $field.hasClass( that.has_error_class );

            if (has_error) {
                $field
                    .removeClass(that.has_error_class)
                    .closest(".value")
                        .find(".t-error").remove();
            }
        });
    };

    EventEditDialog.prototype.initDatePicker = function() {
        var that = this;

        var $datePickers = that.$wrapper.find(".js-datepicker");
        $datePickers.each( function() {
            var $input = $(this),
                $altField = $input.closest(".t-date-wrapper").find("input[type='hidden']");

            $input.datepicker({
                altField: $altField,
                altFormat: "yy-mm-dd",
                changeMonth : true,
                changeYear : true,
                shortYearCutoff: 2,
                showOtherMonths: true,
                selectOtherMonths: true,
                stepMonths: 2,
                numberOfMonths: 2,

                beforeShow: function(input, ui) {
                    ui.dpDiv.on("click", function(event) {
                        event.stopPropagation();
                    });
                    $(input).on("click", function(event) {
                        var is_date_picker_opened = isDatePickerOpened();
                        if (is_date_picker_opened) {
                            event.stopPropagation();
                            closeDatePicker();
                            $(this).blur();
                        }
                    });
                }
            });
        });

        function isDatePickerOpened() {
            var result = false,
                $datePicker =  $("#ui-datepicker-div");

            if ( $datePicker.length && !( $datePicker.css("display") == "none") ) {
                result = $datePicker;
            }

            return result;
        }

        function closeDatePicker() {
            $(document).trigger("mousedown");
        }
    };

    EventEditDialog.prototype.initTimePicker = function() {
        var that = this,
            $timePickers = that.$wrapper.find(".js-timepicker");

        $timePickers.each( function() {
            var $input = $(this),
                is_rendered = false;

            $input.timepicker();

            $input.on("showTimepicker", function() {
                var $timepicker = $input.data("timepicker-list");

                if (!is_rendered) {
                    $timepicker.on("click", function (event) {
                        event.stopPropagation();
                    });
                    is_rendered = true;
                }

                var top = ( parseInt($input.offset().top) + parseInt($input.outerHeight()) - parseInt($(window).scrollTop()) );

                $timepicker.css({
                    "position": "fixed",
                    "top": top
                })
            });
        });
    };

    EventEditDialog.prototype.showDeleteConfirm = function() {
        var that = this,
            href = "?module=schedule&action=eventDeleteConfirm",
            data = {
                id: that.event_id
            };

        that.is_locked = true;

        if (that.xhr) {
            that.xhr.abort();
            that.xhr = false;
        }

        that.xhr = $.get(href, data, function(html) {
            new TeamDialog({
                html: html
            });

            that.is_locked = false;

            that.close();
        });
    };

    EventEditDialog.prototype.changeStatus = function( $toggle ) {
        var that = this,
            is_active = $toggle.hasClass(that.active_class);

        if (!is_active) {
            var status = $toggle.data("status-id");

            if (that.$activeStatusToggle) {
                that.$activeStatusToggle.removeClass(that.active_class);
            }

            // Marking
            $toggle.addClass(that.active_class);
            that.$activeStatusToggle = $toggle;

            that.$form.find('input[name="data[is_status]"]')
                .val(status)
                .trigger("change");

            // Show/Hide status fields
            var is_status = (status == 1),
                event_class = "is-event",
                status_class = "is-status";

            that.is_status = is_status;

            if (!is_status) {
                that.$wrapper.removeClass(status_class).addClass(event_class);

            } else {
                that.$wrapper.removeClass(event_class).addClass(status_class);

                // For status is_allday always true
                var $input = that.$form.find(".js-extended-date"),
                    is_all_day = ( $input.attr("checked") == "checked" );

                if (!is_all_day) {
                    $input.click();
                }
            }

            // Generate preview
            that.generateStatusTypes();
            //
            that.generatePreview();

            // Resize
            that.teamDialog.resize();
        }
    };

    EventEditDialog.prototype.changeCalendar = function( $link ) {
        var that = this,
            $li = $link.closest("li"),
            calendar_id = $li.data("calendar-id"),
            is_active = $li.hasClass(that.selected_class);

        if (!is_active && !that.is_locked) {
            that.is_locked = true;
            //
            that.calendar_id = calendar_id;
            // unset selected
            that.$calendarToggle.find("." + that.selected_class).removeClass(that.selected_class);
            // set selection
            that.$calendarToggle.find(".t-selected-item").html( $link.html() );
            // set data
            that.$form.find('input[name="data[calendar_id]"]')
                .val(calendar_id)
                .trigger("change");

            // render
            var $menu = that.$calendarToggle.find(".menu-v");
            $menu.hide();

            setTimeout( function() {
                $menu.removeAttr("style");
                that.is_locked = false;
            }, 500);

            //
            that.generateStatusTypes();
            //
            that.generatePreview();
        }
    };

    EventEditDialog.prototype.changeUser = function( $link ) {
        var that = this,
            $li = $link.closest("li"),
            user_id = $li.data("user-id"),
            is_active = $li.hasClass(that.selected_class);

        if (!is_active && !that.is_locked) {
            that.is_locked = true;
            //
            that.user_id = user_id;
            // unset selected
            that.$userToggle.find("." + that.selected_class).removeClass(that.selected_class);
            // set selection
            that.$userToggle.find(".t-selected-item").html( $link.html() );
            // set data
            that.$form.find('input[name="data[contact_id]"]')
                .val(user_id)
                .trigger("change");
            // render
            var $menu = that.$userToggle.find(".menu-v");
            $menu.hide();

            setTimeout( function() {
                $menu.removeAttr("style");
                that.is_locked = false;
            }, 200);

            that.generatePreview();
        }
    };

    EventEditDialog.prototype.save = function( $form ) {
        var that = this,
            data = prepareData( $form.serializeArray() ),
            href = "?module=schedule&action=eventSave";

        that.is_locked = true;

        if (data) {
            $.post(href, data, function(response) {

                if (response.status == "ok") {
                    if (response.data && response.data.message) {
                        alert(response.data.message);
                    }
                    that.reloadCalendar();
                } else if (response.errors) {
                    var redirect = null;
                    $.each(response.errors, function (i, error) {
                        if (error[0] === 'redirect') {
                            redirect = error[1];
                        }
                    });
                    redirect && (location.href = redirect);
                }

                that.close();

                that.is_locked = false;
            }, "json");
        } else {
            that.is_locked = false;
        }

        function prepareData(data) {
            var result = {},
                errors = [];

            $.each(data, function(index, item) {
                result[item.name] = item.value;
            });

            if (!result["data[summary_type]"]) {
                result["data[summary_type]"] = "custom";
            }

            var is_status = that.is_status;
            if (is_status) {
                result["data[description]"] = ( result["data[status_description]"] ) ? result["data[status_description]"] : "";
                delete result["data[status_description]"];

                result["data[summary]"] = that.summary;
                delete result["data[status_summary]"];
            }

            if (!$.trim(result["data[summary]"]).length) {
                if (is_status) {
                    errors.push({
                        field: "data[status_summary]",
                        locale: "empty"
                    });
                } else {
                    errors.push({
                        field: "data[summary]",
                        locale: "empty"
                    });
                }
            }

            if (!result["data[start]"].match(/^(\d){4}-(\d){2}-(\d){2}$/)) {
                errors.push({
                    field: "data[end]",
                    locale: "date"
                });
            }

            if (!result["data[end]"].match(/^(\d){4}-(\d){2}-(\d){2}$/)) {
                errors.push({
                    field: "data[end]",
                    locale: "date"
                });
            }

            var startDate = getDate( result["data[start]"] );
            var endDate = getDate( result["data[end]"] );
            if (startDate > endDate) {
                errors.push({
                    field: "data[start_alt]",
                    locale: "period"
                });
                errors.push({
                    field: "data[end_alt]",
                    locale: "period"
                });
            }

            if (errors.length) {
                showErrors(errors);
                return false;
            }

            if (!result["data[start_time]"].length) {
                result["data[start_time]"] = "00:00"
            }

            if (!result["data[end_time]"].length) {
                result["data[end_time]"] = "00:00"
            }

            result["data[start]"] = result["data[start]"] + " " + result["data[start_time]"];
            result["data[end]"] = result["data[end]"] + " " + result["data[end_time]"];
            result["data[is_allday]"] = ( result["data[is_allday]"] ) ? 1 : 0;

            delete result["data[start_time]"];
            delete result["data[end_time]"];
            delete result["data[start_alt]"];
            delete result["data[end_alt]"];

            return result;

            function getDate( string ) {
                var dateArray = string.split("-"),
                    year = parseInt(dateArray[0]),
                    month = parseInt(dateArray[1]),
                    day = parseInt(dateArray[2]);

                if (year > 0 && month > 0 && day > 0) {
                    return new Date(year, (month - 1), day);
                } else {
                    return false;
                }
            }

            function showErrors( errors ) {
                // Remove old errors
                that.$form.find(".t-error").remove();

                // Display new errors
                $.each(errors, function(index, item) {
                    var $field = that.$form.find("[name='" + item.field + "']");
                    if ($field.length) {
                        $field
                            .addClass(that.has_error_class)
                            .after('<span class="t-error">' + that.locales[item.locale] + '</span>')
                    }
                });
            }
        }
    };

    EventEditDialog.prototype.reloadCalendar = function() {
        var that = this;

        // $.team.content.reload();
        $.team.calendar.reload();
    };

    EventEditDialog.prototype.dateToggle = function( $toggle ) {
        var that = this,
            is_active = ( $toggle.attr("checked") == "checked" ),
            $dateFields = that.$form.find(".t-date-wrapper");

        if (!is_active) {
            $dateFields.addClass(that.extended_class);
        } else {
            $dateFields.removeClass(that.extended_class);
        }
    };

    EventEditDialog.prototype.generatePreview = function() {
        var that = this,
            $preview = that.$wrapper.find(".t-preview-block");

        var calendar = that.calendars[that.calendar_id],
            bg_color = calendar["bg_color"],
            font_color = calendar["font_color"];

        var user = that.users[that.user_id],
            $userIcon = user.$icon.clone(),
            user_name = user.name;

        var $type = $("<span class='t-type'>" + ( that.summary ? that.summary : that.locales.empty_type ) + "</span>").css({
            "background": bg_color,
            "color": font_color
        });

        $preview.html("")
            .append($userIcon)
            .append("<span class='t-user-name'>" + user_name + "</span>")
            .append( $type );
    };

    EventEditDialog.prototype.generateStatusTypes = function() {
        var that = this,
            $typeToggle = that.$typeToggle;

        // render
        var $wrapper = renderList();

        // events
        setBinds( $wrapper );

        // mark selected items
        setActive( $wrapper );

        function renderList() {
            var $templateItems = $typeToggle.find(".is-template li"),
                $text = $templateItems.eq(0),
                $field = $templateItems.eq(1);

            var $list = $("<ul class='menu-v'></ul>"),
                calendar = that.calendars[that.calendar_id];

            if (calendar.default_status) {
                // 2
                var $li2 = $text.clone();
                $li2.find(".t-type").text(calendar.default_status);
                $li2.find("input:radio").val("default");
                $list.append($li2);
            }

            // 1
            var $li1 = $text.clone();
            $li1.find(".t-type").text(calendar.name);
            $li1.find("input:radio").val("calendar");
            $list.append($li1);

            // 3
            var $li3 = $text.clone();
            $li3.find(".t-type").text( ( calendar.default_status ? calendar.default_status : calendar.name ) + " " + that.locales.till + " " + that.end_date_locale);
            $li3.find("input:radio").val("till");
            $list.append($li3);

            // 5
            var $li5 = $text.clone();
            $li5.find(".t-type").text( ( calendar.default_status ? calendar.default_status : calendar.name ) + " " + that.locales.from + " " + that.start_date_locale + " " + that.locales.till + " " + that.end_date_locale);
            $li5.find("input:radio").val("interval");
            $list.append($li5);

            // 4
            var $li4 = $field.clone();
            $li4.find("input:radio").val("custom");
            if (that.summary) {
                $li4.find("input:text").val( that.summary );
            }
            $list.append( $li4 );

            // final
            $typeToggle.find(".value").html("").append( $list );

            return $list;
        }

        function setBinds( $wrapper ) {

            $wrapper.on("change", "input:radio", function() {
                var $input = $(this),
                    is_checked = ( $input.attr("checked") == "checked" ),
                    $text = $input.closest("li").find(".t-type"),
                    $textInput = $input.closest("li").find("input:text");

                if (is_checked) {
                    if ($text.length) {
                        that.summary = $text.text();
                    } else if ($textInput.length) {
                        that.summary = $textInput.val();
                    } else {
                        return false;
                    }
                    that.summary_type = $input.val();
                    that.$form.trigger("summaryChange");
                    //
                    that.generatePreview();
                }
            });

            $wrapper.on("focus set", "input:text", function() {
                var $input = $(this);

                // set active
                var $radio = $input.closest("li").find("input:radio");
                if ($radio.attr("checked") != "checked") {
                    $radio.attr("checked", "checked").trigger("change");
                }

                if ( $input.hasClass( that.has_error_class ) ) {
                    $input
                        .removeClass(that.has_error_class)
                        .closest(".value")
                        .find(".t-error").remove();
                }
            });

            $wrapper.on("focus change keyup", "input:text", function() {
                var $input = $(this),
                    value = $input.val();
                that.summary = $("<div />").html( $input.val() ).text();

                if (value.length) {
                    that.summary_type = "custom";
                    that.summary = value;
                }

                that.generatePreview();
            });

        }

        function setActive( $wrapper ) {
            // case 1
            if (!that.summary_type && that.summary) {
                that.summary_type = "custom";
            }

            // case 2
            if (that.summary_type) {
                var $active = $wrapper.find("input:radio[value='" + that.summary_type + "']");

                // case 3
                if ($active.length) {
                    $active.click();

                    if (that.summary_type !== "custom") {
                        $wrapper.find("input:text").val("");
                    }

                // case 4
                } else if (that.summary_type == "default") {
                    $wrapper.find("input[value='calendar']").click();

                // case 5
                } else {
                    $wrapper.find("input:text").val( (that.summary ? that.summary : "" ) ).trigger("change");
                }

            // case 3
            } else {
                $wrapper.find("input:radio:first").click();
            }
        }

    };

    EventEditDialog.prototype.setStatusLocale = function() {
        var that = this,
            $startField = that.$wrapper.find("input[name='data[start]']"),
            $endField = that.$wrapper.find("input[name='data[end]']");

        that.start_date_locale = getLocale($startField);
        that.end_date_locale = getLocale($endField);

        function getLocale( $field ) {
            var value = $field.val().split(" ")[0],
                date_array = value.split("-"),
                day = parseInt(date_array[2]),
                month = parseInt(date_array[1]),
                year = parseInt(date_array[0]),
                current_month = ( new Date() ).getFullYear();

            var format = that.locales.status_type.format,
                month_locale = that.locales.status_type.months[month],
                datepicker_locale = $.datepicker.formatDate(format, new Date(year,month-1,day));

            datepicker_locale = datepicker_locale.replace("f", month_locale);

            if ( current_month == year) {
                datepicker_locale = datepicker_locale
                    .replace(", " + year, "")
                    .replace(" " + year, "")
                    .replace(year + " ", "");
            }

            return datepicker_locale;
        }
    };

    EventEditDialog.prototype.close = function() {
        var that = this;

        that.$wrapper.trigger("close");
    };

    return EventEditDialog;

    function getCalendarsArray($wrapper) {
        var result = {};

        $wrapper.find(".menu-v li").each( function() {
            var $li = $(this),
                $icon = $li.find(".userpic20"),
                id = $li.data("calendar-id");

            result[id] = {
                id: id,
                default_status: $li.data("default-status"),
                name: $.trim( $("<div />").html( $li.text() ).text() ).toLowerCase(),
                font_color: $icon.css("color"),
                bg_color: $icon.css("background-color")
            };

        });

        return result;
    }

    function getUsersArray($wrapper) {
        var result = {};

        $wrapper.find(".menu-v li").each( function() {
            var $li = $(this),
                $icon = $li.find(".userpic20"),
                id = $li.data("user-id");

            result[id] = {
                id: id,
                $icon: $icon,
                name: $.trim( $("<div />").html( $li.text() ).text() )
            };

        });

        return result;
    }

})(jQuery);

// Team :: Calendar :: Event View
var EventViewDialog = ( function($) {

    EventViewDialog = function(options) {
        var that = this;

        // DOM
        that.$dialogWrapper = options["$wrapper"];
        that.$wrapper = that.$dialogWrapper.find(".t-dialog-block");

        // VARS
        that.event_id = options["event_id"];
        that.event_edit_uri = "?module=schedule&action=eventEdit";

        // DYNAMIC VARS
        that.xhr = false;

        // INIT
        that.initClass();
    };

    EventViewDialog.prototype.initClass = function() {
        var that = this;

        that.$wrapper.on("click", ".js-edit-event", function(event) {
            event.preventDefault();
            that.showEditForm();
        });

    };

    EventViewDialog.prototype.showEditForm = function() {
        var that = this,
            data = {
                "data[id]": that.event_id
            };

        if (that.xhr) {
            that.xhr.abort();
            that.xhr = false;
        }

        that.xhr = $.post( that.event_edit_uri, data, function(response) {
            var position = that.$wrapper.offset(),
                calendar = $.team.calendar;

            that.close();

            var dialog = new TeamDialog({
                html: response
            });
            calendar.addDialog(dialog);
        });
    };

    EventViewDialog.prototype.close = function() {
        var that = this;

        that.$wrapper.trigger("close");
    };

    return EventViewDialog;

})(jQuery);

// Team :: Calendar :: Delete
var EventDeleteDialog = ( function($) {

    EventDeleteDialog = function(options) {
        var that = this;

        // DOM
        that.$wrapper = options["$wrapper"];
        that.$block = that.$wrapper.find(".t-dialog-block");

        // VARS
        that.event_id = options["event_id"];

        // DYNAMIC VARS
        that.is_locked = false;

        // INIT
        that.initClass();
    };

    EventDeleteDialog.prototype.initClass = function() {
        var that = this;

        that.$block.on("click", ".js-delete-event", function(event) {
            event.preventDefault();
            if (!that.is_locked) {
                that['delete']();
            }
        });
    };

    EventDeleteDialog.prototype['delete'] = function() {
        var that = this,
            href = "?module=schedule&action=eventDelete",
            data = {
                id: that.event_id
            };

        that.is_locked = true;

        $.post(href, data, function(response) {
            if (response.status == "ok") {
                if (response.data && response.data.message) {
                    alert(response.data.message);
                }
                that.$wrapper.trigger("close");
                $.team.calendar.reload();
            }
        });
    };

    return EventDeleteDialog;

})(jQuery);
;
// Team :: Profile
var Profile = ( function($) {

    Profile = function(options) {
        var that = this;

        // DOM
        that.$wrapper = options["$wrapper"];
        that.$tabs = that.$wrapper.find(".t-profile-tabs");
        that.$tabContentPlace = that.$wrapper.find(".t-dynamic-content");
        that.$calendarPlace = that.$wrapper.find(".t-calendar-place");

        // VARS
        that.api_enabled = ( window.history && window.history.pushState );
        that.user = options.user || { id: 0 };
        that.photo_dialog_url = options.photo_dialog_url;

        // DYNAMIC VARS
        that.is_locked = false;
        that.xhr = false;
        that.dialogs = [];

        // INIT
        that.initClass();
    };

    Profile.prototype.initClass = function() {
        var that = this;
        //
        that.initEditableJobtitle();
        //
        that.bindEvents();
    };

    Profile.prototype.bindEvents = function() {
        var that = this;

        that.$tabs.on("click", ".t-tab a", function() {
            that.changeTab( $(this) );
            return false;
        });

        that.$calendarPlace.on("click", ".js-calendar-toggle", function(event) {
            event.preventDefault();
            that.calendarToggle( $(this) );
        });

        that.$calendarPlace.on("click", ".js-show-outer-calendar-manager", function(event) {
            event.stopPropagation();
            that.showOuterDialogDialog();
        });

        // When photo editor dialog changes something, update the contact photo
        that.$wrapper.on('photo_updated photo_deleted', function(evt, data) {
            that.$wrapper.find('.t-userpic').attr('src', data.url);
        });

        // Open photo editor when user clicks on "Change photo" link
        that.$wrapper.find('.photo-change-link a').click(function() {
            $('#contact-photo-crop-dialog').remove();
            $('<div id="contact-photo-crop-dialog">')
                .appendTo(that.$wrapper)
                .waDialog({
                    'class': 'large',
                    url: that.photo_dialog_url,
                    onLoad: function(d) {
                        /* move buttons where appropriate */
                        var $dialog = $(this);
                        $dialog.find('.dialog-buttons-gradient').append($dialog.find('.dialog-content-indent .buttons'));
                    }
                });
        });

        var $profile_header_links = that.$wrapper.find('.profile-header-links');
        $profile_header_links.on('click', '.edit-link', function() {
            that.switchToTab('info', function($iframe) {
                return typeof $iframe[0].contentWindow.$.wa.contactEditor.switchMode === 'function';
            }).then(function($iframe) {
                $iframe[0].contentWindow.$.wa.contactEditor.switchMode('edit');
            });
        });
        $profile_header_links.on('click', '.delete-link', function() {
            var $icon = $(this).find('i');
            if ($icon.is('.loading')) {
                return;
            }
            $icon.toggleClass('delete loading');
            $.team.confirmContactDelete([that.user.id], {
                onInit: function() {
                    $icon.toggleClass('delete loading');
                },
                onDelete: function() {
                    $.team.content.load($.team.app_url);
                }
            });
        });

        // When data in Contact Info tab is saved, update the block above calendar
        var $profile_tabs_iframes = that.$wrapper.find('.t-profile-tabs-iframes');
        var $contact_info_top = $('#contact-info-top');
        $profile_tabs_iframes.on('contact_saved', function(evt, data) {
            // Name, title, company, job title
            var $wrapper = $contact_info_top.closest('.t-profile-page');
            var $h1 = $wrapper.find('.profile .details h1').first();
            $h1.children('.contact-name:first').text(data.name);
            $h1.children('.title:first').text(data.title);

            var $work = $h1.closest('.details').find('.jobtitle-company');
            $work.children('.company').text(data.company);
            $work.children('.title').text(data.jobtitle);
        });
        $profile_tabs_iframes.on('top_fields_updated', function(evt, top) {
            // common fields like email, phone and im
            var html = '';
            for (var j = 0; j < top.length; j++) {
                var f = top[j];
                var icon = f.id != 'im' ? (f.icon ? '<i class="icon16 ' + f.id + '"></i>' : '') : '';
                html += '<li>' + icon + f.value + '</li>';
            }
            $contact_info_top.html(html);
        });

        // customize groups link after list of groups in header
        $('#header-customize-groups-link').click(function(){
            that.switchToTab('access', function($iframe) {
                return typeof $iframe[0].contentWindow.ProfileAccessTab === 'function';
            }).then(function($iframe) {
                if ($iframe[0].contentWindow.$('#form-customize-groups', $iframe[0].contentWindow.body).is(':not(:visible)')) {
                    $iframe[0].contentWindow.$('#open-customize-groups', $iframe[0].contentWindow.body).click();
                }
            });
        });
    };

    Profile.prototype.switchToTab = function(tab_id, testCallback) {

        var $iframes_wrapper = this.$wrapper.find('.t-profile-tabs-iframes');
        var $tab_a = this.$wrapper.find('.t-tab a[data-tab-id="'+tab_id+'"]');
        var deferred = $.Deferred();

        $tab_a.on('tab_content_updated', tryCallback);
        var interval = setInterval(tryCallback, 100);
        if ($tab_a.closest('.t-tab').hasClass('is-selected')) {
            tryCallback();
        } else {
            $tab_a.click();
        }

        // Animate scroll to tabs
        $('html, body').animate({
            scrollTop: $tab_a.offset().top
        }, 500);

        return deferred.promise();

        function tryCallback() {
            var $iframe = $iframes_wrapper.children().filter(function() {
                return tab_id == $(this).data('tab-id');
            }).first();
            try {
                if (!$iframe[0].contentWindow || !testCallback($iframe)) {
                    return;
                }
                setTimeout(function() {
                    deferred.resolve($iframe);
                }, 0);
                $tab_a.off('tab_content_updated', tryCallback);
                if (interval) {
                    clearInterval(interval);
                }
                interval = null;
            } catch (e) {
            }
        }
    };

    Profile.prototype.changeTab = function( $link ) {

        if (this.api_enabled) {

            var tab_id = $link.data('tab-id');
            var profile_uri = window.location.href.match(/^.*\/(id|u)\/[^\/]+/);
            if (!profile_uri || !tab_id) {
                return;
            }

            var uri = profile_uri[0] + '/' + tab_id + '/';
            history.replaceState({
                reload: true,
                content_uri: uri
            }, "", uri);
        }

    };

    Profile.prototype.calendarToggle = function( $toggle ) {
        var that = this,
            short_class = "is-short",
            $text = $toggle.find(".t-calendar-toggle .text"),
            is_active = that.$calendarPlace.hasClass(short_class);

        if ( is_active ) {
            $text.text( $toggle.data("hide-text") );
            that.$calendarPlace.removeClass(short_class);
        } else {
            $text.text( $toggle.data("show-text") );
            that.$calendarPlace.addClass(short_class);
        }
    };

    Profile.prototype.showOuterDialogDialog = function() {
        var that = this,
            href = "?module=schedule&action=settings",
            data = {};

        if (that.user.id > 0) {
            href += '&id=' + that.user.id;
        }

        if (!that.is_locked) {
            that.is_locked = true;

            load();
        }

        function load() {
            $.post(href, data, function(response) {
                new TeamDialog({
                    html: response,
                    onRefresh: load
                });
            }).always( function() {
                that.is_locked = false;
            });
        }
    };

    Profile.prototype.initEditableJobtitle = function() {
        var profile = this,
            $name = profile.$wrapper.find(".js-jobtitle-editable").first();

        if ($name.length) {
            new TeamEditable({
                $wrapper: $name,
                onSave: function( that ) {
                    var text = that.$field.val(),
                        is_empty = ( !text.length );

                    if (that.text !== text) {
                        var href = $.team.app_url + "?module=profile&action=save",
                            data = {
                                id: profile.user.id,
                                data: JSON.stringify({
                                    "jobtitle": text
                                })
                            };

                        that.$field.attr("disabled", true);
                        var $loading = $('<i class="icon16 loading"></i>')
                            .css("margin", "0 0 0 4px")
                            .insertAfter( that.$field );

                        $.post(href, data, function() {
                            that.$field.attr("disabled", false);
                            $loading.remove();

                            that.is_empty = is_empty;
                            that.text = text;
                            that.$wrapper.text( text );
                            that.toggle("hide");

                            if (is_empty) {
                                that.$wrapper.parent().find(".at").hide();
                            }
                        });

                    } else {
                        that.toggle("hide");
                    }
                }
            });
        }
    };

    return Profile;

})(jQuery);

// Team :: Activity :: Lazy Loading
var ActivityLazyLoading = ( function($) {

    ActivityLazyLoading = function(options) {
        var that = this;

        // VARS
        that.list_name = options["names"]["list"];
        that.items_name = options["names"]["items"];
        that.pagind_name = options["names"]["paging"];
        that.user_id = options["user_id"];

        // DOM
        that.$wrapper = ( options["$wrapper"] || false );
        that.$list = that.$wrapper.find(that.list_name);
        that.$window = $(window);

        // Handler
        that.onLoad = ( options["onLoad"] || function() {} );

        // DYNAMIC VARS
        that.$paging = that.$wrapper.find(that.pagind_name);
        that.xhr = false;
        that.is_locked = false;

        // INIT
        that.addWatcher();
    };

    ActivityLazyLoading.prototype.addWatcher = function() {
        var that = this,
            window_parent = window.parent;

        that.$window.on("scroll", onScroll);
        if (window_parent && window.frameElement) {
            $(window_parent).on("scroll", onScroll);
        }

        function onScroll() {
            var is_paging_exist = window && ( $.contains(document, that.$paging[0]) );
            if (is_paging_exist && window_parent && window.frameElement) {
                is_paging_exist = $.contains(window_parent.document, window.frameElement);
            }

            if (is_paging_exist) {
                try {
                    that.onScroll();
                } catch (e) {
                    is_paging_exist = false;
                }
            }
            if (!is_paging_exist) {
                that.$window.off("scroll", onScroll);
                $(window_parent).off("scroll", onScroll);
            }
        }
    };

    ActivityLazyLoading.prototype.onScroll = function() {
        var that = this,
            $window = that.$window,
            scroll_top = $window.scrollTop(),
            display_height = $window.height(),
            paging_top = that.$paging.offset().top;

        if (window.parent && window.frameElement) {
            var $parent_window = $(window.parent);
            display_height = $parent_window.height();
            scroll_top += $parent_window.scrollTop();
            paging_top += $(window.frameElement).offset().top;
        }

        // If we see paging, stop watcher and run load
        if (scroll_top + display_height >= paging_top) {

            if (!that.is_locked) {
                that.is_locked = true;
                that.loadNextPage();
            }
        }
    };

    ActivityLazyLoading.prototype.loadNextPage = function() {
        var that = this,
            href = $.team.app_url + "?module=profile&action=activity",
            data = {
                max_id: that.$paging.data("max-id"),
                id: that.user_id,
                timestamp: that.$list.find(that.items_name).last().data("timestamp")
            };

        if (that.xhr) {
            that.xhr.abort();
            that.xhr = false;
        }

        that.xhr = $.get(href, data, function(response) {
            var $wrapper = $(response),
                $newItems = $wrapper.find(that.list_name + " " + that.items_name),
                $newPaging = $wrapper.find(that.pagind_name);

            that.$list.append($newItems);
            that.$paging.after($newPaging);
            that.$paging.remove();
            that.$paging = $newPaging;
            that.is_locked = false;
            //
            that.onLoad();
        });
    };

    return ActivityLazyLoading;

})(jQuery);

var OutsideCalendarsDialog = ( function($) {

    OutsideCalendarsDialog = function(options) {
        var that = this;

        // DOM
        that.$dialogWrapper = options["$wrapper"];
        that.$wrapper = that.$dialogWrapper.find(".t-dialog-block");
        that.$form = that.$wrapper.find("form");

        // VARS

        // DYNAMIC VARS
        that.is_locked = false;
        that.xhr = false;

        // INIT
        that.initClass();
    };

    OutsideCalendarsDialog.prototype.initClass = function() {
        var that = this;

        that.bindEvents();
    };

    OutsideCalendarsDialog.prototype.bindEvents = function() {
        var that = this;

        that.$wrapper.on("click", ".t-external-calendar-unmount", function () {
            that.deleteExternalCalendar( $(this).data('id') );
        });

        that.$wrapper.find(".js-add-external-calendar").on("click", function(event) {
            event.preventDefault();
            //
            that.close();
            //
            var content_uri = $(this).attr("href");
            if (content_uri) {
                $.team.content.load(content_uri);
            }
        });
    };

    OutsideCalendarsDialog.prototype.deleteExternalCalendar = function (id) {
        $.get('?module=calendarExternal&action=DeleteConfirm', {
            id : id
        }, function (html) {
            new TeamDialog({
                html: html,
                onOpen: function ($dialog) {
                    $dialog.bind('afterDelete', function () {
                        $.team.content.reload();
                    });

                }
            });
        });
    };

    OutsideCalendarsDialog.prototype.close = function() {
        var that = this;

        that.$wrapper.trigger("close");
    };

    return OutsideCalendarsDialog;

})(jQuery);;
//
// Scripts for Access page in backend
//
var AccessPage = ( function($) {

    var Slider = ( function($) {

        Slider = function(options) {
            var that = this;

            // DOM
            that.$wrapper = options["$wrapper"];
            that.$accessWrapper = that.$wrapper.find(".t-access-wrapper");
            that.$accessSlider = that.$wrapper.find(".t-access-slider");
            that.$headerApps = that.$wrapper.find(".t-header-apps");
            that.$headerList = that.$headerApps.find(".t-apps-list");
            that.$apps = that.$headerList.find(".t-app-item");

            // VARS
            that.item_count = that.$apps.length;

            // DYNAMIC VARS
            that.type_class = false;
            that.left = 0;
            that.items_left = 0;
            that.access_wrapper_w = false;
            that.access_slider_w = false;
            that.item_w = false;

            // INIT
            that.initClass();
        };

        Slider.prototype.initClass = function() {
            var that = this;
            //
            that.detectSliderWidth();
            //
            that.showArrows();

            $(window).on("resize", onResize);

            that.$wrapper.on("click", ".t-action", function () {
                var $link = $(this);
                if ($link.hasClass("left")) {
                    that.moveSlider( false );
                }
                if ($link.hasClass("right")) {
                    that.moveSlider( true );
                }
            });

            function onResize() {
                var is_exist = $.contains(document, that.$wrapper[0]);
                if (is_exist) {
                    that.reset();
                } else {
                    $(window).off("resize", onResize);
                }
            }
        };

        Slider.prototype.detectSliderWidth = function() {
            var that = this;

            that.access_wrapper_w = that.$accessWrapper.outerWidth();
            that.access_slider_w = that.$accessSlider.outerWidth();
            that.item_w = that.$apps.first().outerWidth();
        };

        Slider.prototype.showArrows = function() {
            var that = this;

            if (that.left >= 0) {
                if (that.access_wrapper_w < that.access_slider_w) {
                    setType("type-1");
                } else {
                    setType();
                }
            } else {
                if (that.access_wrapper_w < (that.access_slider_w - Math.abs(that.left) ) ) {
                    setType("type-2");
                } else {
                    setType("type-3");
                }
            }

            function setType( type_class ) {
                if (that.type_class) {
                    that.$accessWrapper.removeClass(that.type_class);
                    that.$headerApps.removeClass(that.type_class);
                }

                if (type_class) {
                    that.$accessWrapper.addClass(type_class);
                    that.$headerApps.addClass(type_class);
                    that.type_class = type_class;
                }
            }
        };

        Slider.prototype.setLeft = function( left ) {
            var that = this;

            that.$headerList.css({
                left: left
            });

            that.$accessSlider.css({
                left: left
            });

            that.left = left;
        };

        Slider.prototype.moveSlider = function( right ) {
            var that = this,
                step = 1,
                items_left = that.items_left,
                new_items_left, new_left;

            if (right) {
                new_items_left = items_left + step;
            } else {
                new_items_left = items_left - step;
                if (new_items_left < 0) {
                    new_items_left = 0;
                }
            }

            new_left = new_items_left * that.item_w;

            if ( new_left > -(that.access_wrapper_w - that.access_slider_w) ) {
                new_left = -(that.access_wrapper_w - that.access_slider_w)
            }

            that.items_left = new_items_left;
            that.setLeft(-new_left);
            that.showArrows();
        };

        Slider.prototype.reset = function() {
            var that = this;

            that.items_left = 0;
            that.setLeft(0);
            that.detectSliderWidth();
            that.showArrows();
        };

        return Slider;

    })($);

    var ElasticHeader = ( function($) {

        ElasticHeader = function(options) {
            var that = this;

            // DOM
            that.$wrapper = options["$wrapper"];
            that.$header = that.$wrapper.find(".t-elastic-header");

            // VARS
            that.wrapper_offset = that.$wrapper.offset();
            that.header_w = that.$header.outerWidth();
            that.header_h = that.$header.outerHeight();
            that.fixed_class = "is-fixed";

            // DYNAMIC VARS
            that.is_fixed = false;

            // INIT
            that.initClass();
        };

        ElasticHeader.prototype.initClass = function() {
            var that = this,
                $window = $(window);

            $window
                .on("scroll", onScroll)
                .on("resize", onResize);

            function onScroll() {
                var is_exist = $.contains(document, that.$header[0]);
                if (is_exist) {
                    that.onScroll( $window.scrollTop() );
                } else {
                    $window.off("scroll", onScroll);
                }
            }

            function onResize() {
                var is_exist = $.contains(document, that.$header[0]);
                if (is_exist) {
                    that.onResize();
                } else {
                    $window.off("resize", onResize);
                }
            }
        };

        ElasticHeader.prototype.onScroll = function( scroll_top ) {
            var that = this;

            var set_fixed = ( scroll_top > that.wrapper_offset.top );
            if (set_fixed) {

                that.$header
                    .addClass(that.fixed_class)
                    .css({
                        top: 0,
                        left: that.wrapper_offset.left,
                        width: that.header_w
                    });

                that.is_fixed = true;

            } else {

                that.$header
                    .removeClass(that.fixed_class)
                    .removeAttr("style");

                that.is_fixed = false;
            }
        };

        ElasticHeader.prototype.onResize = function() {
            var that = this;

            that.header_w = that.$wrapper.outerWidth();

            if (that.is_fixed) {
                that.$header.width(that.header_w);
            }
        };

        return ElasticHeader;

    })(jQuery);

    //

    AccessPage = function(options) {
        var that = this;

        // DOM
        that.$wrapper = options["$wrapper"];

        // VARS

        // DYNAMIC VARS
        that.slider = false;
        that.dialogs = [];

        // INIT
        that.initClass();
    };

    AccessPage.prototype.initClass = function() {
        var that = this;
        //
        that.initAccessSlider();
        //
        that.initElasticHeader();
        //
        that.initHover();
        //
        that.bindEvents();
    };

    AccessPage.prototype.bindEvents = function() {
        var that = this;

        that.$wrapper.on("click", ".t-access-status", function(event) {
            event.preventDefault();
            var $access = $(this);
            if ($access.hasClass("is-admin") && !that.dialogs.length) {
                $.team.content.load($access.data("uri"));
            } else {
                showAccessDialog($access, $access.data("app-id"), $access.data("user-id"));
            }
        });

        // When user changes rights of user, update the table
        var h;
        $(document).on('team_access_level_changed', h = function(evt, data) {
            if (!$.contains(document.body, that.$wrapper[0])) {
                $(document).off('team_access_level_changed', h);
                return;
            }
            var $access_status = that.$wrapper.find('table.t-access-table tr[data-user-id="'+data.contact_id+'"] .t-access-status[data-app-id="'+data.app_id+'"]');
            $access_status.removeClass('type-no type-limited type-full type-'+data.prev_level).addClass('type-'+data.new_level);
        });
    };

    AccessPage.prototype.initAccessSlider = function() {
        var that = this;

        if (!that.slider) {
            that.slider = new Slider({
                $wrapper: that.$wrapper
            });
        }
    };

    AccessPage.prototype.initElasticHeader = function() {
        var that = this;

        new ElasticHeader({
            $wrapper: that.$wrapper
        });
    };

    AccessPage.prototype.closeDialogs = function() {
        var that = this,
            result = false;

        // Prev Dialog
        if (that.dialogs.length) {

            $.each(that.dialogs, function(index, dialog) {
                if ( $.contains(document, dialog.$wrapper[0]) ) {
                    dialog.close();
                    result = true;
                }
            });

            // or $.each()splice
            that.dialogs = [];
        }

        return result;
    };

    AccessPage.prototype.initHover = function() {
        var that = this,
            $activeUser = false,
            $activeApp = false,
            hover_class = "highlighted";

        that.$wrapper.on("mouseenter", ".t-access-status", function() {
            render( $(this) );
        });

        that.$wrapper.on("mouseleave", ".t-access-status", clear);

        function render( $link ) {
            var user_id = $link.data("user-id"),
                app_id = $link.data("app-id");

            clear();

            if (user_id && app_id) {
                var $user = $("#t-user-" + user_id),
                    $app = $("#t-app-" + app_id);

                if ($user.length) {
                    $user.addClass(hover_class);
                    $activeUser = $user;
                }
                if ($app.length) {
                    $app.addClass(hover_class);
                    $activeApp = $app;
                }
            }
        }

        function clear() {
            if ($activeUser) {
                $activeUser.removeClass(hover_class);
                $activeUser = false;
            }
            if ($activeApp) {
                $activeApp.removeClass(hover_class);
                $activeApp = false;
            }
        }
    };

    return AccessPage;

})(jQuery);

( function($) {

/**
 * Dialog to set up access rights of a single user for a single app.
 * Used on access page, group access page, and access tab in profile.
 */
window.AccessDialog = ( function($) {

    function AccessDialog(options) {
        var that = this;

        // DOM
        that.$dialogWrapper = options["$wrapper"];
        that.$wrapper = that.$dialogWrapper.find(".t-dialog-block");
        that.$limitedContent = that.$wrapper.find(".t-limited-access-form");

        //
        that.active_class = "is-active";
        that.disabled_class = "is-disabled";

        // VARS
        that.wa_app_url = options["wa_app_url"];
        that.app_id = options["app_id"];
        that.contact_id = options["contact_id"];
        that.teamDialog = ( that.$dialogWrapper.data("teamDialog") || false );
        that.noticeToggle = getNoticeToggle( that.$wrapper );

        // DYNAMIC VARS
        that.$activeTab = that.$wrapper.find(".t-access-item." + that.active_class);
        that.active_access_id = that.$activeTab.data("access-id");
        that.is_locked = false;

        // INIT
        that.initClass();
    }

    AccessDialog.prototype.initClass = function() {
        var that = this;

        that.bindEvents();
    };

    AccessDialog.prototype.bindEvents = function() {
        var that = this;

        // Do stuff when user clicks on no access/limited/full access buttons
        that.$wrapper.on("click", ".t-access-item", function() {
            var $item = $(this),
                is_active = $item.hasClass(that.active_class),
                is_disabled = $item.hasClass(that.disabled_class);

            if ( !(that.is_locked || is_active || is_disabled) ) {
                that.changeTab( $item );

                if (that.teamDialog) {
                    that.teamDialog.resize();
                }
            } else if (is_disabled) {
                alert($item.data('reason-disabled'));
            }
        });

        // Submit
        that.$wrapper.on("click","input[type=\"submit\"]", function(event) {
            event.stopPropagation();
            that.save();
        });
    };

    AccessDialog.prototype.changeTab = function( $link ) {
        var that = this,
            access_id = $link.data("access-id"),
            $limitedContent = that.$limitedContent;

        // unmark old selected item
        if (that.$activeTab.length) {
            that.$activeTab.removeClass(that.active_class);
        }

        // mark this link
        $link.addClass(that.active_class);
        that.$activeTab = $link;

        that.$wrapper.find(".t-hint").hide();
        if (access_id == "no") {
            that.$wrapper.find(".t-hint.js-access-no").show();

        } else if (access_id == "full") {
            that.$wrapper.find(".t-hint.js-access-full").show();
        }

        // limited
        if (that.$limitedContent.length) {
            if (access_id == 'limited') {
                // "Limited" status is not saved right away. User can either press "Save" or "cancel"
                $limitedContent.show();
            } else {
                $limitedContent.hide();
            }
        }
    };

    AccessDialog.prototype.save = function() {
        var that = this,
            access_id = that.$activeTab.data("access-id"),
            access_code = getAccessCode( access_id );

        that.is_locked = true;
        that.noticeToggle.loading();

        var promise = setAppRight(access_code);

        if (access_id == "limited") {
            promise = promise.then( function() {
                var $form = that.$limitedContent.find("form");
                return $.post($form.attr('action'), $form.serialize(), 'json');
            });
        }

        promise.then( function() {
            triggerAccessLevelChangedEvent(that.active_access_id, access_id);
            that.active_access_id = access_id;
            that.noticeToggle.success();
            that.is_locked = false;
            that.teamDialog.close();
        });

        function triggerAccessLevelChangedEvent(prev_saved_access_id, new_access_id) {
            $(document).trigger("team_access_level_changed", {
                app_id: that.app_id,
                contact_id: that.contact_id,
                prev_level: prev_saved_access_id,
                new_level: new_access_id
            });
        }

        function setAppRight(value) {
            var href = that.wa_app_url + "?module=accessSave&action=rights&id=" +  that.contact_id;
            return $.post(href, {
                app_id: that.app_id,
                name: "backend",
                value: value
            }, "json");
        }

        function getAccessCode( access_id ) {
            var result = false,
                accessCodeTable = {
                    "no": 0,
                    "limited": 1,
                    "full": 2
                };

            if (accessCodeTable.hasOwnProperty(access_id)) {
                result = accessCodeTable[access_id];
            }

            return result;
        }
    };

    return AccessDialog;

    function getNoticeToggle( $wrapper ) {
        var $loading = $wrapper.find(".t-loading"),
            $success = $wrapper.find(".t-success"),
            visible_class = "is-visible",
            notice, timer;

        return notice = {
            loading: function() {
                $success.removeClass(visible_class);
                $loading.addClass(visible_class);
            },
            success: function() {
                $success.addClass(visible_class);
                $loading.removeClass(visible_class);
                if (timer) {
                    clearTimeout(timer);
                }
                timer = setTimeout(function() {
                    if ($.contains(document, $success[0])) {
                        notice.hide();
                    }
                }, 2000);
            },
            hide: function() {
                if (timer) {
                    clearTimeout(timer);
                }
                $loading.removeClass(visible_class);
                $success.removeClass(visible_class);
            }
        };
    }

})($);

//
// Scripts for access tab in contact profiles.
//
window.ProfileAccessTab = function(o) { "use strict";
    var login = o.login,
        password = o.password, // true/false
        contact_id = o.contact_id,
        wa_app_url = o.wa_app_url,
        loc = o.loc;

    initGroupsChecklist();
    initFormCreateUser();
    initFormChangeLogin();
    initFormChangePassword();
    if (!o.is_own_profile) {
        initToggleBan(o.wa_url, o.wa_framework_version);
    }

    initSelectorGlobalAccess(o.is_own_profile, o.contact_no_access, o.contact_groups_no_access);
    new UserAccessTable({
        $wrapper: $('#c-access-rights-wrapper'),
        contact_id: contact_id,
        is_frame: true
    });
    return;

    function initGroupsChecklist() {//{{{
        var $form = $('#form-customize-groups');
        if (!$form.length) {
            return;
        }

        initCheckboxList($('#form-customize-groups .c-checkbox-menu'));
        $('#open-customize-groups').click(function() {
            $('#form-customize-groups').toggle();
        });
        $('#cancel-customize-groups').click(function() {
            var form = $('#form-customize-groups').hide();
            form.find('.loading').hide();
            form.find('.errormsg').remove();
            return false;
        });
        $form.submit(function() {
            var form = $(this);
            form.find('.errormsg').remove();
            form.find('.loading').show();
            $.post(form.attr('action'), form.serialize(), function(response) {
                if (response.status == 'ok') {
                    try {
                        window.parent.$.team.sidebar.reload();
                    } catch (e) {
                    }
                    if (window.hasOwnProperty("profileTab")) {
                        window.profileTab.reload();
                    }
                } else if (response.status == 'fail') {
                    form.find('.c-checkbox-menu-container').after($('<em class="errormsg">'+response.errors.join('<br />')+'</em>'));
                }
            }, 'json');
            return false;
        });

        function initCheckboxList($ul) {
            $ul.find('input[type="checkbox"]')
                .click(updateStatus)
                .each(updateStatus);
            return $ul;

            function updateStatus(i, cb) {
                var self = $(cb || this);
                if (self.prop('checked')) {
                    self.parent().addClass('highlighted');
                } else {
                    self.parent().removeClass('highlighted');
                }
            }
        }
    }//}}}

    function initFormCreateUser() {//{{{
        $("#c-credentials-form").submit(function () {
            var form = $(this);
            form.find('input.error').removeClass('error');
            form.find('.errormsg').remove();
            var login_input = form.find('.c-login-input');
            var new_login = $.trim(login_input.val());
            if (!new_login) {
                login_input.addClass('error').after('<em class="errormsg">'+loc["Login is required"]+'</em>');
                return false;
            }

            $.post(form.attr('action'), form.serialize(), function (r) {
                if (r.status === 'ok') {
                    form.hide();
                    login = new_login;
                    $('#c-login-block').show()
                        .find('.c-login-input').val(login).end()
                        .find('.c-login').text(login);
                    try {
                        window.parent.$.team.sidebar.reload();
                    } catch (e) {
                    }
                    try {
                        window.profileTab.reload();
                    } catch (e) {
                    }
                } else if (r.status === 'fail') {
                    form.find('input[type="submit"]').parent().prepend($('<em class="errormsg" style="margin-bottom:10px">'+r.errors.join('<br>')+'</em>'));
                }
            }, 'json');
            return false;
        }).find('.cancel').click(function() {
            $('#c-credentials-block').hide();
            return false;
        });
    }//}}}

    function initFormChangeLogin() {//{{{

        var $form = $("#c-login-form");
        var $login_input = $form.find('.c-login-input');

        $form.submit(function () {
            $form.find('input.error').removeClass('error');
            $form.find('.errormsg').remove();
            var new_login = $.trim($login_input.val());
            if (login === new_login) {
                return false;
            }
            if (!new_login) {
                $login_input.addClass('error').after('<em class="errormsg">'+loc["Login is required."]+'</em>');
                return false;
            }

            $form.find('.loading').show();
            $.post($form.attr('action'), $form.serialize(), function (r) {
                $form.find('.loading').hide();
                if (r.status === 'ok') {
                    $('#c-login-block').show();
                    $login_input.val(new_login);
                    $form.find('.c-login').text(new_login);
                    $form.find('.c-one-tab').show();
                    $form.find('.c-two-tab').hide();
                    if (!login) {
                        try {
                            window.profileTab.reload();
                        } catch (e) {
                        }
                    }
                    login = new_login;
                } else if (r.status === 'fail') {
                    $form.find('input[type="submit"]').parent().prepend($('<em class="errormsg" style="margin-bottom:10px">'+r.errors.join("\n<br>\n")+'</em>'));
                }
            }, 'json');
            return false;
        });

        $form.find('.c-tab-toggle').click(function() {
            $form.find('.c-one-tab,.c-two-tab').toggle();
            if ($login_input.is(':visible')) {
                $login_input.focus();
            }
            return false;
        });
    }//}}}

    function initFormChangePassword() {//{{{

        var $form = $('#c-password-form');
        var $password_input = $form.find('.c-password-input');
        var $confirm_password_input = $form.find('.c-confirm-password-input');

        $form.submit(function() {
            $form.find('input.error').removeClass('error');
            $form.find('.errormsg').remove();

            // do passwords match?
            if ($password_input.val() !== $confirm_password_input.val()) {
                $password_input.addClass('error');
                $confirm_password_input.after().after('<em class="errormsg">'+loc["Passwords do not match."]+'</em>');
                return false;
            }

            $form.find('.loading').show();
            $.post($form.attr('action'), $form.serialize(), function(response) {
                $form.find('.loading').hide();
                if (response.status === 'ok') {
                    password = true;
                    $password_input.val('');
                    $confirm_password_input.val('');
                    $form.find('.c-one-tab').show();
                    $form.find('.c-two-tab').hide();
                    $('#c-password-block').show();
                } else if (response.status === 'fail') {
                     $confirm_password_input.after('<em class="errormsg">'+response.errors.join('<br />')+'</em>');
                }
            }, 'json');

            return false;
        });

        // Show inputs when user clicks 'change password' link
        // and hide inputs when user clicks cancel.
        $form.find('.c-tab-toggle').click(function() {
            $form.find('.c-one-tab,.c-two-tab').toggle();
            var $input = $form.find('.c-password-input');
            if ($input.is(':visible')) {
                $input.focus();
            }
            return false;
        });
    }//}}}

    function initToggleBan(wa_url, wa_framework_version) {//{{{

        if (!$.fn.iButton) {
            $.ajax({
                cache: true,
                dataType: "script",
                url: wa_url + 'wa-content/js/jquery-plugins/ibutton/jquery.ibutton.min.js?' + wa_framework_version,
                success: function() {
                    initToggleBan(wa_url, wa_framework_version);
                }
            });
            return;
        }

        var $fields = $('.basic-user-fields');

        // Link to block contact
        var $link_block = $('#c-access-link-block').click(function() {
            if (!confirm($link_block.data('alert'))) {
                return false;
            }

            $('.c-shown-on-enabled').hide();
            var $loading = $link_unblock.parent().find('.loading').show();
            $.post(wa_app_url+'?module=accessSave&action=ban&id='+contact_id, {
                magic_word: 'please'
            }, function(r) {
                $loading.hide();
                if (r.status === 'ok') {
                    $fields.addClass('gray');
                    $('.c-shown-on-disabled').show();
                    $('#tc-user-access-disabled').show().html(r.data.access_disable_msg);
                }
            }, 'json');
        });

        // Link to unblock contact
        var $link_unblock = $('#c-access-link-unblock').click(function() {
            if (!confirm($link_unblock.data('alert'))) {
                return false;
            }

            $('.c-shown-on-disabled').hide();
            var $loading = $link_unblock.parent().find('.loading').show();
            $.post(wa_app_url+'?module=accessSave&action=unban&id='+contact_id, {
                magic_word: 'please'
            }, function() {
                $loading.hide();
                $fields.removeClass('gray');
                $('.c-shown-on-enabled').show();
                $('#tc-user-access-disabled').hide().html('');
            });
        });

    }//}}}

    function initSelectorGlobalAccess(is_own_profile, contact_no_access, contact_groups_no_access) {//{{{
        var $select = $('#c-access-rights-toggle');
        var $confirm_wrapper = $('#access-rights-toggle-confirm');
        var last_select_value = $select.val();

        if (contact_no_access) {
            $('.c-shown-on-access').hide();
        } else {
            $('.c-shown-on-access').show();
        }

        updateForm();
        $confirm_wrapper.on('click', '.cancel', function() {
            $select.val(last_select_value);
            $confirm_wrapper.hide();
        });
        $confirm_wrapper.on('click', '.button', function() {
            $confirm_wrapper.hide();
            updateFormAndSave();
        });

        $select.change(function() {
            if (!login) {
                updateForm();
                return;
            }

            $('#c-access-rights-hint-warning').hide();
            $('#c-access-rights-hint-customize').hide();
            var new_select_value = $select.val();
            if (new_select_value === undefined) {
                new_select_value = '1';
            }

            if (new_select_value === last_select_value) {
                $confirm_wrapper.hide();
            } else {
                $confirm_wrapper.show();
            }
        });

        function updateFormAndSave() {
            if (updateForm()) {
                saveUserAccess();
            }
        }

        function updateForm() {
            $('#c-access-rights-hint-warning').hide();
            $('#c-access-rights-hint-customize').hide();
            var new_select_value = $select.val();
            if (new_select_value === undefined) {
                new_select_value = '1';
            }
            switch(new_select_value) {
                case 'remove':
                    $('#c-credentials-block').hide();
                    $('#c-login-block').hide();
                    $('#c-password-block').hide();
                    if (contact_groups_no_access) {
                        $('#c-access-rights-by-app').hide();
                        $('.c-shown-on-access').hide();
                        break;
                    }
                    $select.val(last_select_value || '0');
                    $('#c-access-rights-hint-warning').show();
                    return false;
                case '0':
                    if (!login && !password) {
                        $('#c-credentials-block').show()
                            .find('.c-login-input').focus().end()
                            .find('.cancel').one('click.access', function() {
                                $select.val(last_select_value);
                                updateFormAndSave();
                            });
                        return false;
                    } else {
                        if (login) {
                            $('#c-access-rights-by-app').show();
                            $('.c-shown-on-access').show();
                            $('#c-login-block').show();
                            $('#c-password-block').show();
                            break;
                        } else {
                            $('#c-login-block').show()
                                .find('.cancel').one('click.access', function() {
                                    $select.val(last_select_value);
                                    updateFormAndSave();
                                }).end()
                                .find('.c-tab-toggle:first').click();
                            $('#c-password-block').show();
                            return false;
                        }
                    }
                case '1':
                    if (!login && !password) {
                        $('#c-credentials-block').show()
                            .find('.c-login-input').focus().end()
                            .find('.cancel').one('click.access', function() {
                                $select.val(last_select_value);
                                updateFormAndSave();
                            });
                        return false;
                    } else {
                        if (login) {
                            $('#c-access-rights-by-app').hide();
                            $('.c-shown-on-access').show();
                            $('#c-login-block').show();
                            $('#c-password-block').show();
                            break;
                        } else {
                            $('#c-login-block').show()
                                .find('.cancel').one('click.access', function() {
                                    $select.val(last_select_value);
                                    updateFormAndSave();
                                }).end()
                                .find('.c-tab-toggle:first').click();
                            $('#c-password-block').show();
                            return false;
                        }
                    }
                default:
                    return false;
            }

            if (is_own_profile) {
                $('#c-login-block').show();
                $('#c-password-block').show();
            }

            last_select_value = new_select_value;
            return true;
        }

        function saveUserAccess() {
            var new_select_value = $select.val();
            if (new_select_value === undefined) {
                new_select_value = '1';
            }

            (function() {
                switch(new_select_value) {
                    case '0':
                        // Limited access user
                        return makeIsUser1().then(function() {
                            return setAppRight('webasyst', 'backend', 0);
                        });
                    case '1':
                        // make superadmin
                        // also sets is_user=1 if it was 0
                        return setAppRight('webasyst', 'backend', 1);
                    case 'remove':
                        // revoke all access
                        return $.post(wa_app_url+'?module=accessSave&action=revoke', { id: contact_id }, 'json');
                }
            }()).then(function() {
                if (contact_groups_no_access && new_select_value == '0') {
                    $('#c-access-rights-hint-customize').show();
                } else {
                    $('#c-access-rights-hint-warning').hide();
                }
            });

            function makeIsUser1() {
                return $.post(wa_app_url+'?module=accessSave&action=makeuser', { id: contact_id }, 'json');
            }

            function setAppRight(app_id, name, value) {
                return $.post(wa_app_url+'?module=accessSave&action=rights&id='+contact_id, {
                    app_id: app_id,
                    name: name,
                    value: value
                }, 'json');
            }
        }
    }//}}}

};

/**
 * Table to set up per-app access rights for a single user or group.
 * Used on access profile page, as well as in group access page.
 */
window.UserAccessTable = function(o) { "use strict";
    var $wrapper = o.$wrapper,
        contact_id = o.contact_id, // may be negative if group
        is_frame = ( o.is_frame || false ); // need for dialog for detecting window scroll top

    // Open access dialog when user clicks on app status block
    $wrapper.on('click', '.t-access-status', function(event) {
        event.preventDefault();
        var $access = $(this);
        showAccessDialog($access, $access.data('app-id'), contact_id, true, is_frame);
    });

    // Update app status block when access rights change
    var h;
    $(document).on('team_access_level_changed', h = function(evt, data) {
        if (!$.contains(document.body, $wrapper[0])) {
            $(document).off('team_access_level_changed', h);
            return;
        }
        $wrapper.find('.t-access-status[data-app-id="'+data.app_id+'"]')
            .removeClass('type-no type-limited type-full type-'+data.prev_level)
            .addClass('type-'+data.new_level);
    });
};

/**
 * Dialog to set up access rights for a single user/group and single app.
 * Used on access page, group access page, and profile access tab.
 * @param $access    jQuery object to position center of the dialog above.
 * @param app_id     string
 * @param contact_id int    negative for group, positive for user
 * @param is_attach boolean set position near access column
 * @param is_frame boolean need for dialog for detecting window scroll top
 */
window.showAccessDialog = function($access, app_id, contact_id, is_attach, is_frame) {//{{{

    // Close all dialogs if exist
    $access.trigger('close');

    $.post($.team.app_url + "?module=access&action=dialog", {
        user_id: contact_id,
        app_id: app_id
    }, function(response) {
        var options = {
            html: response
        };

        if (is_frame && is_attach) {
            options.setPosition = function(area) {
                var $window = $(window),
                    window_w = $window.width(),
                    top = $access.offset().top;

                return {
                    top: top,
                    left: parseInt( (window_w - area.width)/2 )
                };
            }
        }

        new TeamDialog(options);
    });

};//}}}

})(jQuery);;
// Pages

var GroupPage = ( function($) {

    GroupPage = function(options) {
        var that = this;

        // DOM
        that.$wrapper = options["$wrapper"];

        // VARS
        that.group_id = options["group_id"];
        that.map_adapter = options["map_adapter"];
        that.latitude = options["latitude"];
        that.longitude = options["longitude"];
        that.can_manage = options["can_manage"];

        // DYNAMIC VARS
        that.map_is_render = false;
        that.map_is_shown = false;

        // INIT
        that.initClass();
    };

    GroupPage.prototype.initClass = function() {
        var that = this;
        //
        that.bindEvents();
        //
        if (that.can_manage) {
            //
            that.initEditableName();
            //
            that.initEditableDescription();
        }
        //
        that.initInfoBlock();
    };

    GroupPage.prototype.bindEvents = function() {
        var that = this;

        if (that.map_adapter && that.latitude && that.longitude) {
            that.$wrapper.on("click", ".js-open-map-link", function() {
                that.showMap();
            });
        }
    };

    GroupPage.prototype.showMap = function() {
        var that = this,
            $wrapper = that.$wrapper.find(".t-map-wrapper");

        if (that.map_is_shown) {
            $wrapper.slideUp(200);
        } else {
            if (!that.map_is_render) {
                // for height
                $wrapper.show();
                // init
                that.initMap();
                // save
                that.map_is_render = true;
            } else {
                $wrapper.slideDown(200);
            }
        }

        that.map_is_shown = !that.map_is_shown;
    };

    GroupPage.prototype.initMap = function() {
        var that = this;

        var $map = that.$wrapper.find("#t-location-map"),
            map = new TeamMap($map, that.map_adapter);

        map.render(that.latitude, that.longitude);
    };

    GroupPage.prototype.initEditableName = function() {
        var group = this,
            $name = group.$wrapper.find(".js-name-editable").first();

        if ($name.length) {
            new TeamEditable({
                $wrapper: $name,
                onSave: function( that ) {
                    var text = that.$field.val(),
                        do_save = ( text.length && that.text !== text );

                    if (do_save) {
                        var href = $.team.app_url + "?module=group&action=save",
                            data = {
                                "data[id]": group.group_id,
                                "data[name]": text
                            };

                        that.$field.attr("disabled", true);
                        var $loading = $('<i class="icon16 loading"></i>')
                            .css("margin", "0 0 0 4px")
                            .insertAfter( that.$field );

                        $.post(href, data, function() {
                            that.$field.attr("disabled", false);
                            $loading.remove();

                            that.text = text;
                            that.$wrapper.text( text );
                            that.toggle("hide");

                            $.team.sidebar.reload();
                        });

                    } else {
                        if (!text.length) {
                            that.$field.val( that.text );
                        }
                        that.toggle("hide");
                    }
                }
            });
        }
    };

    GroupPage.prototype.initEditableDescription = function() {
        var group = this,
            $name = group.$wrapper.find(".js-desc-editable").first();

        if ($name.length) {
            new TeamEditable({
                $wrapper: $name,
                onSave: function( that ) {
                    var text = that.$field.val(),
                        is_empty = ( !text.length );

                    if (that.text !== text) {
                        var href = $.team.app_url + "?module=group&action=save",
                            data = {
                                "data[id]": group.group_id,
                                "data[description]": text
                            };

                        that.$field.attr("disabled", true);
                        var $loading = $('<i class="icon16 loading"></i>')
                            .css("margin", "0 0 0 4px")
                            .insertAfter( that.$field );

                        $.post(href, data, function() {
                            that.$field.attr("disabled", false);
                            $loading.remove();

                            that.is_empty = is_empty;
                            that.text = text;
                            that.$wrapper.text( text );
                            that.toggle("hide");

                            if (is_empty) {
                                $.team.content.reload();
                            }
                        });

                    } else {
                        that.toggle("hide");
                    }
                }
            });
        }
    };

    GroupPage.prototype.initInfoBlock = function () {
        var that = this,
            $info_block = that.$wrapper.find(".t-info-notice-wrapper"),
            storage = new $.store(),
            key = "team/empty_group_notice_hide";

        if (storage.get(key)) {
            $info_block.hide();
        } else {
            $info_block.show();
        }

        $info_block.find(".t-info-notice-toggle").on("click", function () {
            storage.set(key, 1);
            $info_block.hide();
        });
    };

    return GroupPage;

})(jQuery);

var GroupManage = ( function($) {

    GroupManage = function(options) {
        var that = this;

        // DOM
        that.$wrapper = options["$wrapper"];
        that.$groupUsersW = that.$wrapper.find(".t-users-list.is-used-list");
        that.$groupUsersHint = that.$wrapper.find(".t-empty-users-in-group");
        that.$otherUsersW = that.$wrapper.find(".t-users-list.is-unused-list");
        that.$otherUsersHint = that.$wrapper.find(".t-empty-users-outside-group");

        // VARS
        that.group_id = options["group_id"];
        that.hidden_class = "is-hidden";
        that.locales = options["locales"];

        // DYNAMIC VARS
        that.$sidebarLink = false;
        that.is_locked = false;
        that.xhr = false;
        that.group_count = that.$groupUsersW.find(".t-user-wrapper").length;
        that.other_count = that.$otherUsersW.find(".t-user-wrapper").length;

        // INIT
        that.initClass();
    };

    GroupManage.prototype.initClass = function() {
        var that = this;
        //
        that.bindEvents();
        //
        that.initAutoComplete();
        //
        that.initEditableName();
    };

    GroupManage.prototype.bindEvents = function() {
        var that = this;

        that.$wrapper.on("click", ".js-edit-group", function(event) {
            event.preventDefault();
            if (that.group_id && !that.is_locked) {
                that.showEditGroupDialog();
            }
        });

        that.$wrapper.on("click", ".js-delete-group", function(event) {
            event.preventDefault();
            if (that.group_id && !that.is_locked) {
                that.showDeleteDialog();
            }
        });

        that.$groupUsersW.on("click", ".js-move-user", function(event) {
            event.preventDefault();
            if (!that.is_locked) {
                that.moveUser( $(this).closest(".t-user-wrapper"), false );
            }
        });

        that.$otherUsersW.on("click", ".js-move-user", function(event) {
            event.preventDefault();
            if (!that.is_locked) {
                that.moveUser( $(this).closest(".t-user-wrapper"), true );
            }
        });
    };

    GroupManage.prototype.showEditGroupDialog = function() {
        var that = this,
            href = "?module=group&action=edit",
            data = {
                id: that.group_id
            };

        if (!that.is_locked) {
            that.is_locked = true;

            if (that.xhr) {
                that.xhr.abort();
                that.xhr = false;
            }

            that.xhr = $.get(href, data, function(response) {
                new TeamDialog({
                    html: response
                });
                that.is_locked = false;
            });
        }
    };

    GroupManage.prototype.showDeleteDialog = function() {
        var that = this,
            href = $.team.app_url + "?module=group&action=deleteConfirm",
            data = {
                id: that.group_id
            };

        if (!that.is_locked) {
            that.is_locked = true;

            if (that.xhr) {
                that.xhr.abort();
                that.xhr = false;
            }

            that.xhr = $.get(href, data, function(html) {
                new TeamDialog({
                    html: html
                });

                that.is_locked = false;

                that.$wrapper.trigger("close");
            });
        }
    };

    GroupManage.prototype.moveUser = function( $user, add ) {
        var that = this,
            data = {
                user_id: $user.data("user-id"),
                group_id: that.group_id
            },
            href;

        if (!that.is_locked) {

            // Save
            if (that.xhr) {
                that.xhr.abort();
                that.xhr = false;
            }

            if (add) {
                href = $.team.app_url + "?module=group&action=userAdd";
            } else {
                href = $.team.app_url + "?module=group&action=userRemove";
            }

            that.xhr = $.post(href, data, function(response) {
                if (response.status == "ok") {
                    // Render
                    if (add) {
                        that.$groupUsersW.append( $user );
                        that.group_count++;
                        that.other_count--;
                    } else {
                        that.$otherUsersW.prepend( $user );
                        that.group_count--;
                        that.other_count++;
                    }

                    if (that.group_count <= 0) {
                        that.$groupUsersW.addClass(that.hidden_class);
                        that.$groupUsersHint.removeClass(that.hidden_class);
                    } else {
                        that.$groupUsersW.removeClass(that.hidden_class);
                        that.$groupUsersHint.addClass(that.hidden_class);
                    }

                    if (that.other_count <= 0) {
                        that.$otherUsersW.addClass(that.hidden_class);
                        that.$otherUsersHint.removeClass(that.hidden_class);
                    } else {
                        that.$otherUsersW.removeClass(that.hidden_class);
                        that.$otherUsersHint.addClass(that.hidden_class);
                    }

                    that.setCount( that.group_count );
                }
                that.is_locked = false;
            });
        }

    };

    GroupManage.prototype.setCount = function( count ) {
        var that = this,
            href = $.team.app_url + 'group/' + that.group_id + "/";

        if (!that.$sidebarLink) {
            that.$sidebarLink = $.team.sidebar.$wrapper.find('a[href="' + href + '"] ');
        }

        if (that.$sidebarLink.length) {
            var $li = that.$sidebarLink.closest("li"),
                $counter;

            // Render
            $li.find(".indicator").remove();
            $counter = $li.find(".count");
            $counter.text(count);

            // Save
            $.team.sidebar.saveCount(href, count);
        }
    };

    GroupManage.prototype.initAutoComplete = function() {
        var that = this,
            $field = that.$wrapper.find(".t-autocomplete-wrapper .t-input"),
            $hint = false,
            timeout = 0;

        $field.autocomplete({
            source: getSource,
            minLength: 2,
            open: function() {
                removeHint();
            },
            focus: function() {
                return false;
            },
            select: function( event, ui ) {
                if (ui.item.id) {
                    addUser(ui.item.id);
                }
                $field.val("");
                return false;
            }
        });

        function removeHint() {
            clearTimeout(timeout);

            if ($hint.length) {
                $hint.remove();
                $hint = false;
            }
        }

        function addHint( locale ) {
            var time = 1000;

            $hint = $("<span class=\"t-hint\"><i class=\"icon16 yes\"></i>" + locale + "</span>");
            $field.after($hint);
            timeout = setTimeout( removeHint, time);
        }

        function getSource( request, response ) {
            var href = $.team.app_url + "?module=autocomplete&type=user",
                data = {
                    term: request.term
                };

            if (that.group_id) {
                data.group_id = that.group_id;
            }

            $.post(href, data, function(data) {
                response( data );
            }, "json");
        }

        function addUser( user_id ) {
            var $link = that.$otherUsersW.find(".t-user-wrapper[data-user-id=\"" + user_id + "\"]");
            if ($link.length) {
                $link.find(".js-move-user").click();
                addHint( that.locales["added"] );
            } else {
                addHint( that.locales["in_group"] );
            }
        }
    };

    GroupManage.prototype.initEditableName = function() {
        var group = this,
            $name = group.$wrapper.find(".js-name-editable").first();

        if ($name.length) {
            new TeamEditable({
                $wrapper: $name,
                onSave: function( that ) {
                    var text = that.$field.val(),
                        do_save = ( text.length && that.text !== text );

                    if (do_save) {
                        var href = $.team.app_url + "?module=group&action=save",
                            data = {
                                "data[id]": group.group_id,
                                "data[name]": text
                            };

                        that.$field.attr("disabled", true);
                        var $loading = $('<i class="icon16 loading"></i>')
                            .css("margin", "0 0 0 4px")
                            .insertAfter( that.$field );

                        $.post(href, data, function() {
                            that.$field.attr("disabled", false);
                            $loading.remove();

                            that.text = text;
                            that.$wrapper.text( text );
                            that.toggle("hide");

                            $.team.sidebar.reload();
                        });

                    } else {
                        if (!text.length) {
                            that.$field.val( that.text );
                        }
                        that.toggle("hide");
                    }
                }
            });
        }
    };

    return GroupManage;

})(jQuery);

// Dialogs

var GroupEditDialog = ( function($) {

    GroupEditDialog = function(options) {
        var that = this;

        // DOM
        that.$wrapper = options["$wrapper"];
        that.$block = that.$wrapper.find(".t-dialog-block");
        that.$form = that.$block.find("form");
        that.$iconToggle = that.$block.find(".t-icon-toggle");
        that.$addressToggle = that.$block.find('.t-address-toggle');
        that.$mapToggle = that.$block.find('.t-map-toggle');
        that.$submitButton = that.$form.find("input[type=\"submit\"]");

        // VARS
        that.selected_class = "is-selected";
        that.hidden_class = "is-hidden";
        that.has_error_class = "error";
        that.locales = options["locales"];
        that.dialog = that.$wrapper.data("teamDialog");

        // DYNAMIC VARS
        that.$activeType = that.$block.find(".t-type-toggle ." + that.selected_class);
        that.$activeIcon = that.$iconToggle.find("." + that.selected_class);
        that.is_locked = false;
        that.save_timeout = 0;
        // for map
        that.is_map_loading = false;

        // INIT
        that.bindEvents();
        that.teamMap = that.initMap( ( options["map_type"] || "google") );
    };

    GroupEditDialog.prototype.bindEvents = function() {
        var that = this;

        that.$block.on("click", ".t-type-toggle .t-toggle-item", function(event) {
            event.stopPropagation();
            that.setType( $(this) );
        });

        that.$iconToggle.on("click", ".t-icon-item", function(event) {
            event.preventDefault();
            that.setIcon( $(this) );
        });

        that.$form.on("submit", function(event) {
            event.preventDefault();
            if (!that.is_locked) {
                that.$submitButton.parent().append("<i class=\"icon16 loading\"></i>");
                that.save();
            }
        });

        // Remove errors hints
        var $fields = that.$form.find("input, textarea");
        $fields.on("mousedown", function() {
            var $field = $(this),
                has_error = $field.hasClass( that.has_error_class );

            if (has_error) {
                $field
                    .removeClass(that.has_error_class)
                    .closest(".value")
                    .find(".t-error").remove();
            }
        });
    };

    GroupEditDialog.prototype.setType = function( $label ) {
        var that = this,
            type = $label.data("type");

        if ($label.hasClass(that.selected_class)) {
            return false;
        }

        if (that.$activeType.length) {
            that.$activeType.removeClass(that.selected_class);
        }

        if (type == "group") {
            that.$iconToggle.removeClass(that.hidden_class);
            that.$addressToggle.addClass(that.hidden_class);
            that.$mapToggle.addClass(that.hidden_class);
        } else {
            that.$iconToggle.addClass(that.hidden_class);
            that.$addressToggle.removeClass(that.hidden_class);
            that.$mapToggle.removeClass(that.hidden_class);
        }

        $label.addClass(that.selected_class);
        that.$activeType = $label;
        // resize
        that.dialog.resize();
    };

    GroupEditDialog.prototype.setIcon = function( $icon ) {
        var that = this,
            icon_class = $icon.data("icon-class");

        if ($icon.hasClass(that.selected_class)) {
            return false;
        }

        if (that.$activeIcon.length) {
            that.$activeIcon.removeClass(that.selected_class);
        }

        that.$form.find("input[name=\"data[icon]\"]")
            .val(icon_class)
            .trigger("change");

        $icon.addClass(that.selected_class);
        that.$activeIcon = $icon;
    };

    GroupEditDialog.prototype.save = function(try_num) {
        var that = this,
            href = "?module=group&action=save",
            data;

        try_num = try_num || 0;

        if (!that.is_locked) {
            that.is_locked = true;
            data = prepareData( that.$form.serializeArray() );

            if (data) {
                if (that.is_map_loading && try_num < 5) {
                    that.is_locked = false;
                    that.save_timeout = setTimeout( function() {
                        if ($.contains(document, that.$wrapper[0])) {
                            that.save(try_num + 1);
                        }
                    }, 1000);
                    return false;
                }

                var post = function () {
                    $.post(href, data, function(response) {
                        if (response.status == "ok") {
                            var content_uri = $.team.app_url + "group/" + response.data.id + "/manage/";
                            $.team.content.load( content_uri );
                            $.team.sidebar.reload();
                            that.is_locked = false;
                        }
                    });
                };

                var address = data['data[location][address]'],
                    lat = data['data[location][latitude]'],
                    lng = data['data[location][longitude]'];
                if (address && (!lat || !lng) && that.teamMap) {
                    that.teamMap.geocode(
                        address,
                        function (lat, lng) {
                            data['data[location][latitude]'] = lat;
                            data['data[location][longitude]'] = lng;
                            post();
                        },
                        function () {
                            post();
                        }
                    );
                    return;
                }

                post();



            } else {
                that.is_locked = false;
            }
        }

        function prepareData(data) {
            var result = {},
                errors = [];

            $.each(data, function(index, item) {
                result[item.name] = item.value;
            });

            if (!$.trim(result["data[name]"]).length) {
                errors.push({
                    field: "data[name]",
                    locale: "empty"
                });
            }

            if (errors.length) {
                showErrors(errors);
                return false;
            }

            return result;

            function showErrors( errors ) {
                // Remove old errors
                that.$form.find(".t-error").remove();

                // Display new errors
                $.each(errors, function(index, item) {
                    var $field = that.$form.find("[name='" + item.field + "']");
                    if ($field.length) {
                        $field
                            .addClass(that.has_error_class)
                            .after('<span class="t-error">' + that.locales[item.locale] + '</span>')
                    }
                });
            }
        }
    };

    GroupEditDialog.prototype.initMap = function( adapter ) {
        var that = this,
            $block = that.$block,
            $address = that.$addressToggle.find('.f-location-edit-address-input'),
            $longtitude = that.$addressToggle.find('.t-location-longitude-input'),
            $latitude = that.$addressToggle.find('.t-location-latitude-input'),
            $map = that.$mapToggle.find('.t-location-edit-map'),
            $hint = that.$addressToggle.find(".t-map-hint"),
            timeout = 0,
            teamMap;

        // init sizes otherwise map will not be shown
        if ($address.length > 0) {
            var width = that.$form.find(".value").first().width();
            $map.width(width);
            $map.height(width / 1.618);
        }

        // init map
        teamMap = new TeamMap($map, adapter);

        // first show on map
        var lng = $longtitude.val();
        var lat = $latitude.val();
        if (lng && lat) {
            openMap({
                lat: lat,
                lng: lng
            });
        }

        // bind events
        $address.on("change", function() {
            var address = $(this).val();
            if (address.length) {
                openMap(address);
            } else {
                $longtitude.val("");
                $latitude.val("");
                $map.hide();
            }
        });

        $address.on("keyup", function() {
            clearTimeout(timeout);
            var address = $(this).val();
            if (address.length) {
                that.is_map_loading = true;
                timeout = setTimeout( function() {
                    openMap(address);
                }, 1000);
            } else {
                $longtitude.val("");
                $latitude.val("");
                $map.hide();
            }
        });

        //
        function openMap(query) {
            clearTimeout(timeout);

            var is_address = $.type(query) === "string";
            if (is_address) {
                that.is_map_loading = true;
                teamMap.geocode(query, function(lat, lng) {
                    $latitude.val(lat);
                    $longtitude.val(lng);
                    $hint.hide();
                    openMap(lat, lng);
                    that.is_map_loading = false;
                }, function () {
                    $map.hide();
                    // correct top of dialog
                    $longtitude.val("");
                    $latitude.val("");
                    $hint.show();
                    that.is_map_loading = false;
                });
            } else {
                openMap(query.lat, query.lng);
            }

            function openMap(lat, lng) {
                if ($map.is(':hidden')) {
                    $map.show();
                    // correct top of dialog
                    $block.data('top', $block.offset().top);
                    $block.css('top', $block.data('top') - $map.height() / 2)
                }
                teamMap.render(lat, lng);
                $latitude.val(lat);
                $longtitude.val(lng);
            }
        }

        return teamMap;
    };

    return GroupEditDialog;

})(jQuery);

var GroupDeleteDialog = ( function($) {

    GroupDeleteDialog = function(options) {
        var that = this;

        // DOM
        that.$wrapper = options["$wrapper"];
        that.$block = that.$wrapper.find(".t-dialog-block");

        // VARS
        that.api_enabled = ( window.history && window.history.replaceState );
        that.group_id = options["group_id"];

        // DYNAMIC VARS
        that.is_locked = false;

        // INIT
        that.initClass();
    };

    GroupDeleteDialog.prototype.initClass = function() {
        var that = this;

        that.$block.on("click", ".js-delete-event", function(event) {
            event.preventDefault();
            if (!that.is_locked) {
                that['delete']();
            }
        });
    };

    GroupDeleteDialog.prototype['delete'] = function() {
        var that = this,
            href = "?module=group&action=delete",
            data = {
                id: that.group_id
            };

        that.is_locked = true;

        $.post(href, data, function(response) {
            if (response.status == "ok") {
                that.$wrapper.trigger("close");

                if (that.api_enabled) {
                    history.state.content_uri = $.team.app_url;
                    history.replaceState({
                        reload: true,
                        content_uri: $.team.app_url
                    }, "", $.team.app_url);

                    $.team.sidebar.reload();
                    $.team.content.reload();
                } else {
                    location.href = $.team.app_url;
                }

            }
        }, "json");
    };

    return  GroupDeleteDialog;

})(jQuery);
;
// Pages

var SettingsPage = ( function($) {

    SettingsPage = function(options) {
        var that = this;

        // DOM
        that.$wrapper = options["$wrapper"];
        that.$calendarToggle = that.$wrapper.find("#t-calendar-settings");
        that.$mapToggle = that.$wrapper.find("#t-map-toggle");
        that.$form = that.$wrapper.find("form");
        that.$submitButton = that.$form.find("input[type=\"submit\"]");

        // VARS
        that.locales = options["locales"];

        // DYNAMIC VARS
        that.$notice = false;
        that.is_locked = false;
        that.is_form_changed = false;
        that.xhr = false;

        // INIT
        that.initClass();
    };

    SettingsPage.prototype.initClass = function() {
        var that = this;
        //
        that.bindEvents();
        //
        that.initSortable()
    };

    SettingsPage.prototype.bindEvents = function() {
        var that = this;

        that.$calendarToggle.on("click", ".js-edit-calendar", function(event) {
            event.preventDefault();
            var calendar_id = parseInt( $(this).closest(".t-calendar-item").data("id") );
            if (calendar_id) {
                that.showEditDialog( calendar_id );
            }
        });

        that.$calendarToggle.on("click", ".js-add-calendar", function(event) {
            event.preventDefault();
            that.showEditDialog();
        });

        that.$mapToggle.on("change", "input:radio", function() {
            var $input = $(this),
                is_checked = ($input.attr("checked") == "checked");

            if (is_checked) {
                that.$mapToggle.find(".t-hidden-content").hide();

                var $hiddenBlock = $input.closest("li").find(".t-hidden-content");
                if ($hiddenBlock.length) {
                    $hiddenBlock.show();
                }
            }
        });

        that.$form.on("submit", function(event) {
            event.preventDefault();
            if (that.is_form_changed) {
                that.save( that.$form );
            }
        });

        that.$form.on("change", "input, select, textarea", setChanged);

        function setChanged() {
            if (!that.is_form_changed) {
                that.is_form_changed = true;
                that.$submitButton.removeClass("green").addClass("yellow");
            }
        }
    };

    SettingsPage.prototype.initSortable = function() {
        var that = this,
            item_index;

        that.$calendarToggle.find("ul").sortable({
            handle: ".t-toggle",
            items: "> .t-calendar-item",
            axis: "y",
            start: function(event,ui) {
                item_index = ui.item.index();
                if (that.$notice) {
                    that.$notice.remove();
                    that.$notice = false;
                }
            },
            stop: function(event,ui) {
                if (item_index != ui.item.index()) {
                    that.saveCalendarsSort(ui);
                }
            }
        });
    };

    SettingsPage.prototype.showEditDialog = function( id ) {
        var that = this,
            href = $.team.app_url + "?module=calendar",
            data = {};

        if (id) {
            data["id"] = id;
        }

        if (that.xhr) {
            that.xhr.abort();
            that.xhr = false;
        }

        that.xhr = $.post(href, data, function( html ) {
            that.dialog = new TeamDialog({
                html: html
            });
        });
    };

    SettingsPage.prototype.saveCalendarsSort = function(ui) {
        var that = this,
            $item = ui.item,
            href = $.team.app_url + "?module=settings&action=calendarsSortSave",
            data = {
                calendars: getIndexArray()
            };

        if (that.xhr) {
            that.xhr.abort();
            that.xhr = false;
        }

        that.$notice = showLoadingNotice( $item );

        that.xhr = $.post(href, data, function(response) {
            that.$notice.remove();
            that.$notice = showSavedNotice( $item );

            setTimeout( function() {
                if (that.$notice && $.contains(document, that.$notice[0])) {
                    that.$notice.remove();
                }
            }, 1000);

            that.xhr = false;
        });

        //

        function getIndexArray() {
            var result = [],
                $calendars = that.$calendarToggle.find(".t-calendar-item");

            $calendars.each( function() {
                var $calendar = $(this),
                    id = $calendar.data("id");

                if (id && id > 0) {
                    result.push(id);
                }
            });

            return result;
        }

        function showLoadingNotice( $item ) {
            var text = ( that.locales["saving"] || ""),
                $notice = $('<span class="t-notice"><i class="icon16 loading"></i>' + text + '</span>');

            $notice.appendTo( $item );

            return $notice;
        }

        function showSavedNotice( $item ) {
            var text = ( that.locales["saved"] || ""),
                $notice = $('<span class="t-notice"><i class="icon16 yes"></i>' + text + '</span>');

            $notice.appendTo( $item );

            return $notice;
        }
    };

    SettingsPage.prototype.save = function( $form ) {
        var that = this,
            url = $.team.app_url + "?module=settings&action=save",
            data = $form.serializeArray();

        var $loading = $("<i class=\"icon16 loading\" style=\"margin: 0 4px;\"></i>");
        $loading.insertAfter( that.$submitButton );

        if (!that.is_locked) {
            that.is_locked = true;
            $.post(url, data, function(r) {
                that.is_form_changed = false;
                that.$submitButton.removeClass("yellow").addClass("green");

                if (r.status === 'ok') {
                    if (r.data.map_info.adapter === 'google') {
                        $.getScript('https://maps.googleapis.com/maps/api/js?sensor=false&key=' +
                            (r.data.map_info.settings.key || '') + '&lang=' + r.data.lang);
                    } else if (r.data.map_info.adapter === 'yandex') {
                        $.getScript('https://api-maps.yandex.ru/2.1/?lang=' + r.data.lang);
                    }
                }

            }).always( function() {
                $loading.remove();
                that.is_locked = false;
            });
        }
    };

    return SettingsPage;

})(jQuery);

// Dialogs

var CalendarEditDialog = ( function($) {

    CalendarEditDialog = function(options) {
        var that = this;

        // DOM
        that.$wrapper = options["$wrapper"];
        that.$block = that.$wrapper.find(".t-dialog-block");
        that.$form = that.$block.find("form");
        that.$styleWrapper = that.$block.find(".t-style-wrapper");
        that.$limitedToggle = that.$block.find(".t-limited-toggle");
        that.$nameField = that.$block.find('input[name="data[name]"]');

        // VARS
        that.calendar_id = options["calendar_id"];
        that.selected_class = "is-selected";
        that.hidden_class = "is-hidden";
        that.has_error_class = "error";
        that.locales = options["locales"];
        that.teamDialog = that.$wrapper.data("teamDialog");

        // DYNAMIC VARS
        that.$selectedStyleButton = that.$styleWrapper.find("." + that.selected_class);
        that.is_locked = false;
        that.xhr = false;

        // INIT
        that.initClass();
    };

    CalendarEditDialog.prototype.initClass = function() {
        var that = this;
        //
        that.bindEvents();
        //
        that.initColorPicker();
    };

    CalendarEditDialog.prototype.bindEvents = function() {
        var that = this;

        that.$block.on("click", ".js-delete-calendar", function(event) {
            event.preventDefault();
            if (!that.is_locked) {
                that.showDeleteConfirm();
            }
        });

        that.$styleWrapper.on("click", ".t-style-item", function(event) {
            event.preventDefault();
            that.setStyleToggle( $(this) );
        });

        that.$form.on("submit", function(event) {
            event.preventDefault();
            if (!that.locked) {
                that.save();
            }
        });

        that.$form.on("change", ".t-color-field", function() {
            if (that.$selectedStyleButton.length) {
                that.$selectedStyleButton.removeClass(that.selected_class);
                that.$selectedStyleButton = false;
            }
        });

        // Remove errors hints
        var $fields = that.$form.find("input, textarea");
        $fields.on("mousedown", function() {
            var $field = $(this),
                has_error = $field.hasClass( that.has_error_class );

            if (has_error) {
                $field
                    .removeClass(that.has_error_class)
                    .closest(".value")
                    .find(".t-error").remove();
            }
        });

        that.$nameField.on("change keyup", function() {
            var value = $(this).val();
            value = value.length ? value : that.locales.preview;
            that.setPreviewName( value );
        });

        that.$limitedToggle.on("change", "input:radio", function() {
            var $hint = that.$limitedToggle.find(".t-hidden-content");
            if ($(this).val().length) {
                $hint.show();
            } else {
                $hint.hide();
            }
            that.teamDialog.resize();
        });
    };

    CalendarEditDialog.prototype.setStyleToggle = function( $button ) {
        var that = this,
            bg_color = $button.css("background-color"),
            font_color = $button.css("color");

        if (that.$selectedStyleButton.length) {
            that.$selectedStyleButton.removeClass(that.selected_class);
        }

        that.setStyleData(bg_color, font_color);

        $button.addClass(that.selected_class);
        that.$selectedStyleButton = $button;
    };

    CalendarEditDialog.prototype.setStyleData = function(bg_color, font_color) {
        var that = this;

        bg_color = rgbToHex(bg_color);
        font_color = rgbToHex(font_color);

        that.$form.find('[name="data[bg_color]"]').val(bg_color).trigger("change");
        that.$form.find('[name="data[font_color]"]').val(font_color).trigger("change");

        function rgbToHex( color_string ) {
            var a, b;

            a = color_string.split("(")[1].split(")")[0];
            a = a.split(",").splice(0,3);
            b = a.map(function(x){
                x = parseInt(x).toString(16);
                return (x.length==1) ? "0"+x : x;
            });

            return "#" + b.join("");
        }
    };

    CalendarEditDialog.prototype.showDeleteConfirm = function() {
        var that = this,
            href = "?module=calendar&action=deleteConfirm",
            data = {
                id: that.calendar_id
            };

        that.is_locked = true;

        if (that.xhr) {
            that.xhr.abort();
            that.xhr = false;
        }

        that.xhr = $.get(href, data, function(html) {
            new TeamDialog({
                html: html
            });

            that.is_locked = false;

            that.$wrapper.trigger("close");
        });
    };

    CalendarEditDialog.prototype.initColorPicker = function() {
        var dialog = this;

        var ColorPicker = ( function($) {

            ColorPicker = function(options) {
                var that = this;

                // DOM
                that.$wrapper = options["$wrapper"];
                that.$field = that.$wrapper.find(".t-color-field");
                that.$icon = that.$wrapper.find(".js-show-color-picker");
                that.$colorPicker = that.$wrapper.find(".t-color-picker");

                // VARS

                // DYNAMIC VARS
                that.is_opened = false;
                that.farbtastic = false;

                // INIT
                that.initClass();
            };

            ColorPicker.prototype.initClass = function() {
                var that = this;

                that.farbtastic = $.farbtastic(that.$colorPicker, function(color) {
                    that.$field.val( color ).change();
                });

                that.$wrapper.data("colorPicker", that);

                that.bindEvents();
            };

            ColorPicker.prototype.bindEvents = function() {
                var that = this;

                that.$field.on("change keyup", function() {
                    var color = $(this).val();
                    //
                    that.$icon.css("background-color", color);
                    that.farbtastic.setColor(color);
                });

                that.$icon.on("click", function(event) {
                    event.preventDefault();
                    // close others opened
                    closeOthersColorPickers();
                    // show current
                    that.displayToggle( !that.is_opened );
                });

                that.$wrapper.on("click", function(event) {
                    event.preventDefault();
                    event.stopPropagation();
                });

                that.$field.on("focus", function() {
                    if (!that.is_opened) {
                        closeOthersColorPickers();
                        that.displayToggle( true );
                    }
                });

                var $background = dialog.$wrapper.find(".t-dialog-background");
                $background.on("click", function() {
                    if (that.is_opened) {
                        that.displayToggle( false );
                    }
                });
                dialog.$block.on("click", function() {
                    if (that.is_opened) {
                        that.displayToggle( false );
                    }
                });

                function closeOthersColorPickers() {
                    that.$wrapper.siblings().each( function() {
                        var colorPicker = $(this).data("colorPicker");
                        if (colorPicker && colorPicker.is_opened) {
                            colorPicker.displayToggle( false );
                        }
                    });
                }
            };

            ColorPicker.prototype.displayToggle = function( show ) {
                var that = this,
                    hidden_class = "is-hidden",
                    $colorPicker = that.$colorPicker;

                if (show) {
                    $colorPicker.removeClass(hidden_class);
                    that.is_opened = true;
                } else {
                    $colorPicker.addClass(hidden_class);
                    that.is_opened = false;
                }
            };

            return ColorPicker;

        })(jQuery);

        dialog.$styleWrapper.find(".t-color-toggle .t-toggle").each( function() {
            new ColorPicker({
                $wrapper: $(this)
            });
        });

    };

    CalendarEditDialog.prototype.setPreviewName = function(value) {
        var that = this;
        that.$styleWrapper.find(".t-style-item").text( value );
    };

    CalendarEditDialog.prototype.save = function() {
        var that = this,
            href = "?module=calendar&action=save",
            data = prepareData( that.$form.serializeArray() );

        if (!that.is_locked) {
            that.is_locked = true;

            if (data) {
                $.post(href, data, function(response) {
                    if (response.status == "ok") {
                        $.team.content.reload();
                        $.team.sidebar.reload();
                        that.is_locked = false;
                    }
                });
            } else {
                that.is_locked = false;
            }
        }

        function prepareData(data) {
            var result = {},
                errors = [];

            $.each(data, function(index, item) {
                result[item.name] = item.value;
            });

            if (!result["data[is_limited]"]) {
                delete result["data[is_limited]"];
            }

            if (!$.trim(result["data[name]"]).length) {
                errors.push({
                    field: "data[name]",
                    locale: "empty"
                });
            }

            if (errors.length) {
                showErrors(errors);
                return false;
            }

            return result;

            function showErrors( errors ) {
                // Remove old errors
                that.$form.find(".t-error").remove();

                // Display new errors
                $.each(errors, function(index, item) {
                    var $field = that.$form.find("[name='" + item.field + "']");
                    if ($field.length) {
                        $field
                            .addClass(that.has_error_class)
                            .after('<span class="t-error">' + that.locales[item.locale] + '</span>')
                    }
                });
            }
        }
    };

    return CalendarEditDialog;

})(jQuery);

var CalendarDeleteDialog = ( function($) {

    CalendarDeleteDialog = function(options) {
        var that = this;

        // DOM
        that.$wrapper = options["$wrapper"];
        that.$block = that.$wrapper.find(".t-dialog-block");

        // VARS
        that.calendar_id = options["calendar_id"];

        // DYNAMIC VARS
        that.is_locked = false;

        // INIT
        that.initClass();
    };

    CalendarDeleteDialog.prototype.initClass = function() {
        var that = this;

        that.$block.on("click", ".js-delete-calendar", function(event) {
            event.preventDefault();
            if (!that.is_locked) {
                that['delete']();
            }
        });
    };

    CalendarDeleteDialog.prototype['delete'] = function() {
        var that = this,
            href = "?module=calendar&action=delete",
            data = {
                id: that.calendar_id
            };

        that.is_locked = true;

        $.post(href, data, function(response) {
            if (response.status == "ok") {
                $.team.content.reload();
                that.$wrapper.trigger("close");
            }
        }, "json");
    };

    return CalendarDeleteDialog;

})(jQuery);
;
var UserList = ( function($) {

    UserList = function(options) {
        var that = this;

        // DOM
        that.$wrapper = options["$wrapper"];
        that.$items = that.$wrapper.find(".t-user-wrapper");

        // VARS

        // DYNAMIC VARS
        that.is_locked = false;
        that.xhr = false;

        // INIT
        that.initClass();
    };

    UserList.prototype.initClass = function() {
        var that = this;
        //
        that.initHightlight();
        //
        that.bindEvents();
    };

    UserList.prototype.bindEvents = function() {
        var that = this,
            $dropZone = false,
            drop_class = "t-drop-here";

        that.$wrapper.find(".js-move-user").draggable({
            helper: "clone",
            delay: 200,
            cursorAt: {
                top: 10,
                left: 20
            },
            start: function(event, ui) {
                ui.helper.addClass("is-clone");

                $dropZone = $.team.sidebar.$wrapper.find(".js-drop-block");
                if ($dropZone.length) {
                    $dropZone.addClass(drop_class);
                }
            },
            stop: function(event, ui) {
                var $helper = ui.helper,
                    $clone = $helper.clone(),
                    time = 300;

                $clone
                    .insertAfter( $helper )
                    .fadeOut( time * .9 );

                setTimeout( function() {
                    $clone.remove()
                }, time);

                if ($dropZone.length) {
                    $dropZone.removeClass(drop_class);
                }
            }
        });
    };

    UserList.prototype.initHightlight = function() {
        var that = this,
            updateDate = $.team.sidebar.link_count_update_date;

        if (updateDate) {
            updateDate = getDate( updateDate );

            that.$items.each( function() {
                var $item = $(this),
                    item_date = $item.data("update-datetime");

                if (item_date && item_date.length) {
                    var itemDate = getDate( getDateArray( item_date ) );
                    if (itemDate > updateDate) {
                        $item.addClass("highlighted");
                    }
                }
            });
        }

        function getDateArray( string ) {
            var parts = string.split(" "),
                part1 = parts[0].split("-"),
                part2 = parts[1].split(":");

            return {
                "year": parseInt(part1[0]),
                "month": parseInt(part1[1]),
                "day": parseInt(part1[2]),
                "hours": parseInt(part2[0]),
                "minutes": parseInt(part2[1]),
                "seconds": parseInt(part2[2])
            };
        }

        function getDate( array ) {
            return new Date(array.year, (array.month - 1), array.day, array.hours, array.minutes, array.seconds);
        }
    };

    return UserList;

})(jQuery);;
var WelcomePage = ( function($) {

    WelcomePage = function(options) {
        var that = this;

        // DOM
        that.$wrapper = options["$wrapper"];
        that.$inviteWrapper = that.$wrapper.find("#t-invite-wrapper");
        that.$inviteList = that.$inviteWrapper.find(".t-invite-list");

        // VARS
        that.locales = options["locales"];
        that.error_class = "error";

        // DYNAMIC VARS
        that.is_locked = false;

        // INIT
        that.initClass();
    };

    WelcomePage.prototype.initClass = function() {
        var that = this;

        // Disable ajax links
        $(document).on("ready", function () {
            $.team.content.is_enabled = false;
        });

        var $iButtons = that.$inviteList.find("input:checkbox");
        $iButtons.each( function() {
            that.initIButton( $(this) );
        });

        that.bindEvents();
    };

    WelcomePage.prototype.bindEvents = function() {
        var that = this;

        that.$wrapper.on("click", ".js-skip-page", function(event) {
            event.stopPropagation();
        });

        that.$wrapper.on("click", ".js-send-invites", function(event) {
            event.preventDefault();
            if (!that.is_locked) {
                that.sendInvites();
            }
        });

        that.$inviteWrapper.on("click", ".js-add-invite", function(event) {
            event.preventDefault();
            that.addNewInvite();
        });

        that.$inviteWrapper.on("click", ".js-remove-invite", function(event) {
            event.preventDefault();
            $(this).closest("li").remove();
        });

        that.$inviteWrapper.on("click", "." + that.error_class, function() {
            that.removeErrors( $(this) );
        });
    };

    WelcomePage.prototype.initIButton = function( $button ) {
        var that = this;

        $button.iButton({
            labelOn : "",
            labelOff : "",
            classContainer: "t-ibutton ibutton-container mini"
        });

        // $button.on("change" ,function () {
        // });
    };

    WelcomePage.prototype.addNewInvite = function() {
        var that = this,
            html = that.$inviteWrapper.find(".t-invite-template").clone().html(),
            $template = $("<li>" + html + "</li>");

        that.$inviteList.append($template);

        var $input = $template.find("input:checkbox");
        that.initIButton( $input );
    };

    WelcomePage.prototype.sendInvites = function() {
        var that = this,
            href = $.team.app_url + "?module=welcome&action=save",
            data = prepareData();

        that.is_locked = true;

        if (data) {
            $.post(href, data, function(response) {
                if (response.errors && response.errors.length) {
                    showErrors(response.errors);
                } else {
                    location.href = $.team.app_url;
                }
            }).always( function() {
                that.is_locked = false;
            });
        } else {
            that.is_locked = false;
        }

        function prepareData() {
            var result = [],
                $items = that.$inviteList.find(".t-invite-item"),
                errors = [];

            $items.each( function(index) {
                var $email = $(this).find("input:text"),
                    $access = $(this).find("input:checkbox"),
                    email = $email.val(),
                    access = ( $access.attr("checked") == "checked" );

                if ( $.trim(email).length ) {
                    var is_email_good = checkEmail(email);
                    if (is_email_good) {
                        result.push({
                            name: "data[" + index + "][email]",
                            value: email
                        });

                        result.push({
                            name: "data[" + index + "][access]",
                            value: access
                        });
                    } else {
                        errors.push({
                            $field: $email,
                            locale: that.locales["incorrect"]
                        });
                    }
                }
            });

            if (errors.length) {
                that.displayErrors(errors);
                return false;
            }

            return (result.length) ? result : false;

            function checkEmail(email) {
                return email.match(".+@.+");
            }
        }

        function showErrors(errors) {
            var result = [];
            $.each(errors, function(i, error) {
                var name = error.name,
                    locale = error.text,
                    index = parseInt( name.replace("data[", "").replace("][email]", "") );

                var $field = that.$inviteList.find(".t-invite-item").eq(index).find(".t-field");
                if ($field.length) {
                    result.push({
                        $field: $field,
                        locale: locale
                    });
                }
            });
            that.displayErrors(result);
        }
    };

    WelcomePage.prototype.removeErrors = function( $input ) {
        var that = this,
            error_class = that.error_class;

        if ($input) {
            $input.removeClass(error_class);
            $input.parent().find(".t-error").remove();
        } else {
            that.$inviteList.find(".t-error").remove();
            that.$inviteList.find("." + error_class).removeClass(error_class);
        }
    };

    WelcomePage.prototype.displayErrors = function(errors) {
        var that = this,
            error_class = that.error_class;

        that.removeErrors();

        $.each(errors, function(index, item) {
            var error = '<span class="t-error">' + item.locale + '</span>';

            item.$field
                .addClass(error_class)
                .before( error );
        });

    };

    return WelcomePage;

})(jQuery);
;
var LongActionProcess = ( function($) {

    var url = '';
    var process_id = '';
    var step_delay = 500;
    var rest_delay = 750;
    var timers_pull = [];
    var post_data = {};
    var instance = null;    // here will be this

    // List of callbacks
    var onCleanup,
        onReady,
        onProgress,
        onError,
        onWarning,
        onStart,
        onStop,
        onAlways;

    var stopped = false;

    var clearAllTimers = function() {
        while (timers_pull.length > 0) {
            var timer_id = timers_pull.shift();
            if (timer_id) {
                clearTimeout(timer_id);
            }
        }
    };

    var cleanup = function () {
        var data = $.extend(true, {}, post_data);
        data.processId = process_id;
        data.cleanup = 1;
        $.post(
            url,
            data,
            function(r) {
                onCleanup && onCleanup(r);
            }).always(function() {
                clearAllTimers();
            });
    };

    var step = function(delay) {
        if (stopped) {
            return;
        }
        delay = delay || step_delay;
        var timer_id = setTimeout(function() {
            var data = $.extend(true, {}, post_data);
            data.processId = process_id;
            $.post(
                url,
                data,
                function(r) {
                    if (!r) {
                        step(rest_delay);
                    } else if (r.ready) {
                        if (onReady) {
                            onReady.call(instance, r);
                        }
                        cleanup();
                    } else if (r.error) {
                        if (onError) {
                            onError.call(instance, r);
                        }
                    } else if (r.progress) {
                        if (onProgress) {
                            onProgress.call(instance, r);
                        }
                        step();
                    } else if (r.warning) {
                        if (onWarning) {
                            onWarning.call(instance, r);
                        }
                        step();
                    } else {
                        step(rest_delay);
                    }
                    if (onAlways) {
                        onAlways.call(instance, r);
                    }
                },
                'json'
            ).error(function() {
                step(rest_delay);
            });
        }, delay);
        timers_pull.push(timer_id);
    };

    var start = function() {
        onStart && onStart();
        var data = $.extend(true, {}, post_data);
        $.post(url, data,
            function(r) {
                if (r && r.processId) {
                    process_id = r.processId;
                    // invoke runner
                    step(100);
                    // invoke messenger
                    step(200);
                } else if (r && r.error) {
                    if (onError) {
                        onError.call(instance, r)
                    }
                } else {
                    if (onError) {
                        onError.call(instance, 'Server error');
                    }
                }
            }, 'json').error(function() {
                if (onError) {
                    onError.call(instance, 'Server error');
                }
            });
    };

    var stop = function() {
        stopped = true;
        if (onStop) {
            onStop.call(instance)
        }
        clearAllTimers();
    };

    var LongActionProcess = function(options) {
        if (!options.url) {
            throw new Error("Url is required");
        }

        url = options.url;
        step_delay = options.step_delay || step_delay;
        rest_delay = options.rest_delay || rest_delay;
        post_data = options.post_data || post_data;

        // init callbacks
        onCleanup = options.onCleanup;
        onReady = options.onReady;
        onProgress = options.onProgress;
        onError = options.onError;
        onWarning = options.onWarning;
        onStart = options.onStart;
        onStop = options.onStop;
        onAlways = options.onAlways;

        instance = this;

    };

    $.extend(LongActionProcess.prototype, {
        start: start,
        stop: stop
    });

    return LongActionProcess;

})(jQuery);;
// Team :: Map
var TeamMap = (function ($) {

    var TeamMap = function ($map, provider, options) {
        var that = this;

        options = options || {};

        // DOM
        if (!$map) {
            throw Error('DOM element is required');
        }
        that.$map = $($map);

        // VARS
        that.provider = provider;
        if (['google', 'yandex'].indexOf(that.provider) < 0) {
            throw Error('Not supported map provider: %s'.replace('%s', that.provider));
        }

        that.map_info = null;

        that.initClass();
    };

    TeamMap.prototype.initClass = function() {
        var that = this;
    };

    TeamMap.prototype.render = function (lat, lng) {
        var that = this;
        switch (that.provider) {
            case 'google':
                return that.googleRender(lat, lng);
            case 'yandex':
                return that.yandexRender(lat, lng);
        }
    };

    TeamMap.prototype.googleRender = function (lat, lng) {
        var that = this;
        that.map_info = that.map_info || {};
        var latLng = new google.maps.LatLng(lat, lng);
        if (!that.map_info.map) {
            var options = {
                zoom: 12,
                center: latLng,
                mapTypeId: google.maps.MapTypeId.ROADMAP
            };
            that.map_info.map = new google.maps.Map(that.$map.get(0), options);
        }
        if (that.map_info.marker) {
            that.map_info.marker.setMap(null);
        }
        that.map_info.marker = new google.maps.Marker({
            position: latLng,
            map: that.map_info.map
        });
        that.map_info.map.setCenter(latLng);

        TeamMap.google_error_html = TeamMap.google_error_html || '';
        setTimeout(function () {
            if (that.$map.find('.gm-err-container').length) {
                var $err = that.$map.find('.gm-err-container');
                $err.find('.gm-err-message').last().after('<div class="gm-err-message">' + $.team.locales.map_check_your_key + '</div>');
                TeamMap.google_error_html = that.$map.find('.gm-err-container').parent().html();
            } else if (!that.$map.find('.gm-style').length) {
                if (TeamMap.google_error_html) {
                    that.$map.children().html(TeamMap.google_error_html);
                } else {
                    var html = '<div class="gm-err-container"><div class="gm-err-content"><div class="gm-err-icon"><img src="https://maps.gstatic.com/mapfiles/api-3/images/icon_error.png" draggable="false" style="user-select: none;"></div><div class="gm-err-title">:title:</div><div class="gm-err-message">:message1:</div><div class="gm-err-message">:message2:</div></div></div>';
                    html = html.replace(':title:', $.team.locales.map_error_title);
                    html = html.replace(':message1:', $.team.locales.map_error_message);
                    html = html.replace(':message2:', $.team.locales.map_check_your_key);
                    that.$map.children().html(html);
                }
            }
        }, 5000);
    };

    TeamMap.prototype.yandexRender = function (lat, lng) {
        var that = this;
        that.map_info = that.map_info || {};
        var coords = [ lat, lng ];
        if (!that.map_info.map) {
            var options = {
                zoom: 12,
                center: coords,
                controls: [
                    'zoomControl',
                    'fullscreenControl'
                ]
            };
            that.map_info.map = new ymaps.Map(that.$map.get(0), options);
        }
        if (that.map_info.marker) {
            that.map_info.map.geoObjects.remove(that.map_info.marker);
        }
        that.map_info.marker = new ymaps.Placemark(coords);
        that.map_info.map.geoObjects.add(that.map_info.marker);
        that.map_info.map.setCenter(coords);
    };

    TeamMap.prototype.geocode = function (query, success, fail) {
        var that = this;
        switch (that.provider) {
            case 'google':
                return that.googleGeocode(query, success, fail);
            case 'yandex':
                return that.yandexGeocode(query, success, fail);
        }
    };

    TeamMap.prototype.googleGeocode = function (query, success, fail) {
        var geocoder = new google.maps.Geocoder();
        var was_res = false,
            too_late = false;
        geocoder.geocode( { 'address': query }, function(results, status) {
            was_res = true;
            if (too_late) {
                return;
            }
            if (status == google.maps.GeocoderStatus.OK) {
                var latLng = results[0].geometry.location;
                success(latLng.lat(), latLng.lng());
            } else {
                fail && fail();
            }
        });
        setTimeout(function () {
            if (!was_res) {
                too_late = true;
                fail && fail(true);
            }
        }, 5000);
    };

    TeamMap.prototype.yandexGeocode = function (query, success, fail) {
        ymaps.geocode(query, {
            results: 1
        }).then(function (res) {
            var found = 1;
            if (res.metaData && res.metaData.geocoder && ('found' in res.metaData.geocoder)) {
                found = res.metaData.geocoder.found;
            }
            if (found <= 0) {
                fail();
                return;
            }
            var firstGeoObject = res.geoObjects.get(0);
            var coords = firstGeoObject.geometry.getCoordinates();
            success(coords[0], coords[1]);
        });
    };

    return TeamMap;

})(jQuery);
;
